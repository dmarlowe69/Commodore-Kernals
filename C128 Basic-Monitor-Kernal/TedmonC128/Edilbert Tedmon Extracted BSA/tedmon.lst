              ; **********************************
              ; The Commodore 128 operating system
              ; **********************************

              ; ASCII/PETSCII control codes

0002          C_ULINE = $02  ; Underline On
000a          LF      = $0a  ; Line Feed
000d          CR      = $0d  ; Carriage Return
000f          BLINK   = $0f  ; Blinking On
0011          DOWN    = $11  ; Cursor Down
0012          REVERSE = $12  ; Reverse Printing
0013          HOME    = $13  ; Cursor Home
0014          DEL     = $14  ; Delete
001b          ESC     = $1b  ; Escape
001d          RIGHT   = $1d  ; Cursor Right
0022          QUOTE   = $22  ; String Delimiter
0027          APOSTR  = $27  ; Apostroph
0091          UP      = $91  ; Cursor Up
00ff          PICHAR  = $ff  ; BASIC Real_PI character

              ; The address range $000 - $03ff is common RAM by default
              ; These locations are accessible from all banks

              ; CPU register

0000          D8502   = $00  ; CPU 8502 register
0001          R8502   = $01  ; CPU 8502 register

              ; Zero page variables and pointers

0002          BANK    = $02  ; Bank configuration

              ; save CPU registers for monitor and sys calls

0003          PC_HI   = $03
0004          PC_LO   = $04
0005          S_REG   = $05
0006          A_REG   = $06
0007          X_REG   = $07
0008          Y_REG   = $08
0009          CHARAC  = $09

              ; The cursor column position prior to the TAB or SPC is moved here from
              ; $XX, and is used to calculate where the cursor ends up after one of
              ; these functions is invoked. Note that the value contained here shows
              ; the position of the cursor on a logical line. Since one logical line
              ; can be two physical lines long, the value stored here can range from
              ; 0 to 79.

000a          ENDCHR  = $0a       ; scan quotes flag
000b          TRMPOS  = $0b       ; TAB column save
000c          B_VERCK = $0c       ; BASIC load/verify flag, 0 = load, 1 = verify

              ; The routine that converts the text in the input buffer into lines of
              ; executable program tokens, and the routines that link these program
              ; lines together, use this location as an index into the input buffer
              ; area. After the job of converting text to tokens is done, the value
              ; in this location is equal to the length of the tokenized line.
              ; The routines which build an array or locate an element in an array use
              ; this location to calculate the number of DIMensions called for and the
              ;  amount of storage required for a newly created array, or the number
              ; of subscripts when referencing an array element.

000d          B_COUNT = $0d       ; BASIC line crunch/array access/logic operators

              ; This is used as a flag by the routines that build an array or
              ; reference an existing array. It is used to determine whether a
              ; variable is in an array, whether the array has already been
              ; DIMensioned, and whether a new array should assume default size 10.

000e          DIMFLG  = $0e       ; DIM flag

              ; This flag is used to indicate whether data being operated upon is
              ; string or numeric. A value of $FF in this location indicates string
              ; data while a $00 indicates numeric data.

000f          VALTYP  = $0f       ; data type flag, $FF = string, $00 = numeric

              ; If the above flag indicates numeric then a $80 in this location
              ; identifies the number as an integer, and a $00 indicates a floating
              ; point number.

0010          INTFLG  = $10

              ; The garbage collection routine uses this location as a flag to
              ; indicate that garbage collection has already been tried before adding
              ; a new string. If there is still not enough memory, an OUT OF MEMORY
              ; error message will result.

              ; LIST uses this byte as a flag to let it know when it has come to a
              ; character string in quotes. It will then print the string,rather than
              ; search it for BASIC keyword tokens.

              ; This location is also used during the process of converting a line of
              ; text in the BASIC input buffer into a linked program line of BASIC
              ; keyword tokens to flag a DATA line is being processed.

0011          GARBFL  = $11

              ; This flag is set from the routines handling FOR, DEF and FN
              ; statements. Names for loop indices and function names must not be
              ; integer. Only identifiers of type real are allowed.

0012          SUBFLG  = $12

               ; input mode, $00 = INPUT, $40 = GET, $98 = READ

0013          INPFLG  = $13

              ; This location is used to determine whether the sign of the value
              ; returned by the functions SIN, COS, ATN or TAN is positive or negative
              ; Also the comparison routines use this location to indicate the outcome
              ; of the compare. For A <=> B the value here will be $01 if A > B,
              ; $02 if A = B, and $04 if A < B. If more than one comparison operator
              ; was used to compare the two variables then the value here will be a
              ; combination of the above values.

0014          TANSGN  = $14       ; ATN sign/comparison evaluation flag

              ; When the default input or output device is used the value here will
              ; be a zero, and the format of prompting and output will be the standard
              ; screen output format. The location $$$ is used to decide what device
              ; actually to put input from or output to.

0015          CHANNL  = $15

              ; Used whenever a 16 bit unsigned integer is used e.g. the target line
              ; number for GOTO, LIST, ON, and GOSUB also the number of a BASIC line
              ; that is to be added or replaced. additionally PEEK, POKE, WAIT, and
              ; SYS use this location as a pointer to the address which is the subject
              ; of the command.

0016          LINNUM  = $16       ; WORD: line number

              ; This location points to the next available slot in the temporary
              ; string descriptor stack located at TEMPST ($16-$1e).

0018          TEMPPT  = $18       ; descriptor stack pointer, next free

              ; This contains information about temporary strings which have not yet
              ; been assigned to a string variable.

0019          LASTPT  = $19       ; current descriptor stack item pointer

              ; Stack for temporary string descriptors
              ; String 1: $1b-$1d
              ; String 2: $1e-$20
              ; String 3: $21-$1e

001b          TEMPST  = $1b       ; (9 bytes): temporary descriptor stack

              ; miscellaneous pointer / word used in many BASIC routines
              ; the subroutine Get_INDEXA_1 is used to read bank 1 values
              ; pointed to by INDEXA

0024          INDEXA  = $24       ; WORD: miscellaneous pointer

              ; miscellaneous pointer / word used in many BASIC routines
              ; the subroutine Get_INDEXB_0 is used to read bank 0 values
              ; pointed to by INDEXB

0026          INDEXB  = $26       ; WORD: miscellaneous pointer

              ; Floating point accumulator #3 (mantissa only)

0028          FAC3_M1 = $28
0029          FAC3_M2 = $29
002a          FAC3_M3 = $2a
002b          FAC3_M4 = $2b

              ;       = $2c       ; FREE

              ; Start of BASIC program in bank 0 : initialized to $1c01

002d          TXTTAB  = $2d       ; WORD: Text Table

              ; Start of variable storage in bank 1 : initialized tp $0400

002f          VARTAB  = $2f       ; WORD: Variable Table

              ; Start of array storage in bank 1 (and top of variable storage)

0031          ARYTAB  = $31       ; WORD: Array Table

              ; Top of arrays and lower boundary of free RAM in bank 1

0033          STREND  = $33       ; WORD: String End

              ; top of free memory in bank 1, initilaized to MEMSIZ

0035          FRETOP  = $35       ; WORD: Free Top of memory

              ; bottom of string space in bank 1

0037          FRESPC  = $37       ; WORD: Free Space

              ; top of BASIC memory in bank 1, initialized to $ff00

0039          MEMSIZ  = $39       ; WORD: Memory Size

              ; These locations contain the line number of the BASIC statement which
              ; is currently being executed. A value of $FF in location CURLIN+1
              ; means that BASIC is in immediate mode.

003b          CURLIN  = $3b       ; WORD: Current Line

              ; TXTPTR is used from the CHRGET (with increment) and CHRGOT
              ; (no increment) routine, to read the next byte and test it
              ; for being numeric, colon (:) or zero.

003d          TXTPTR  = $3d       ; WORD: Text Pointer

              ; FNDPNT is used mainly by subroutines, that use the BASIC stack
              ; e.g. FOR, NEXT, DO, LOOP, GOSUB and RETURN routines.

003f          FNDPNT  = $3f       ; WORD: Find Pointer

              ; These locations hold the line number of the current DATA statement
              ; being READ. These values are defined but never used

0041          DATLIN  = $41       ; WORD: Data Line

              ; These locations point to the address where the next DATA will be READ
              ; from. RESTORE sets this pointer back to the line indicated.

0043          DATPTR  = $43       ; WORD: Data Pointer

              ; READ, INPUT and GET all use this as a pointer to the address of the
              ; source of incoming data, such as DATA statements, or the text input
              ; buffer.

0045          INPPTR  = $45       ; WORD: Input Pointer

              ; Two bytes storing the name of a BASIC variable as ASCII values
              ; The combination of the two bits 7 determines the type
              ; ---------------------------------------------
              ; Real    : AB      = $41 $42 = 'A'     'B'
              ; Function: FNAB()  = $c1 $42 = 'A'+$80 'B'
              ; String  : AB$     = $41 $c2 = 'A'     'B'+$80
              ; Integer : AB%     = $c1 $c2 = 'A'+$80 'B'+$80

0047          VARNAM  = $47       ; WORD: Variable Name

              ; These locations point to the value of the current BASIC variable.
              ; Specifically they point to the byte just after the two-character
              ; variable name.

0049          VARPNT  = $49       ; WORD: Variable Pointer

              ; The address of the BASIC variable which is the subject of a FOR/NEXT
              ; loop is first stored here before being pushed onto the stack.
              ; It is also used in many other routines as temporary pointer.

004b          FORPNT  = $4b       ; WORD: FOR Pointer

              ; VARTXT is used as temporary storage of the TXTPTR nad also for other
              ; temporary values.

004d          VARTXT  = $4d       ; WORD: Variable Text Pointer

              ; Used as temporary storage from operator routines

004f          OP_TMP  = $4f       ; Operator Temporary storage

              ; Named for its use in the garbage collection routine, which reorders
              ; string space. Despite its name this pointer is also used in many
              ; other routines as auxiliary pointer.

0050          GRBPNT  = $50       ; WORD: Garbage collection Pointer

              ; A multi purpose pointer mainly used as descriptor pointer

0052          DSCPNT  = $52       ; WORD: Descriptor Pointer

              ;         $54       ; FREE

              ; This flag helps the LIST routines to know wether they are called
              ; by the LIST command or by the HELP command

0055          HELPER  = $55

              ; The first byte contains permanent the code $4c for the JMP instruction.
              ; The two byte after it are modified by the function handling routine.
              ; After writing a target address to JUMPER+1 and JUMPER+2 a
              ; JSR JUMPER is used to call the function.

0056          JUMPER  = $56       ; 3 BYTES: JMP nnnn

              ; Temporary storage for math routines.
              ; This address overlaps with JUMPER+2 !

0058          OLDOV   = $58       ; Old Operator Value

              ; The address range $59 - $62 is saved and restored en block
              ; in the subroutine Check_Mem_Avail !

              ; Temporary storage for floating point values (5 bytes)
              ; and temporary pointer (block pointer, array pointer)

0059          FACTPA  = $59       ; 5 BYTES: Temporary Floating Point Accumulator A

              ; multi purpose pointer, named after its use in array handling routines
              ; The address overlaps with FACTPA+1 and FACTPA+2

005a          ARYPNT  = $5a       ; WORD: Array Pointer

              ; Frequently used multi purpose pointer.
              ; It has its own fetch routines for access to bank 0 and bank1
              ; named Get_HIGHTR_0 and Get_HIGHTR_1.
              ; The address overlaps with FACTPA+3 and FACTPA+4

005c          HIGHTR  = $5c       ; WORD:

005d          DESCA   = $5d       ; 3 bytes for temporary descriptor

              ; Occasionally the address range $5e - $68 (FACTPB and FAC1)
              ; is used for copy operations in one loop !

              ; Temporary storage for floating point values (5 bytes)
              ; and temporary pointer (block pointer, array pointer)

005e          FACTPB   = $5e      ; 5 BYTES: Temporary Floating Point Accumulator B
005f          TMPVAR   = $5f      ; temporary variable
0060          TENEXP   = $60      ; 10th's exponent
0061          LOWTR    = $61      ; temporaray pointer

0060          M_Aval = $60      ; 3 BYTES (address + bank) used in monitor
0063          M_Bval = $63      ; 3 BYTES (address + bank) used in monitor
0066          M_Cval = $66      ; 3 BYTES (address + bank) used in monitor

              ; Floating point accumulator 1

0063          FAC1_EX  = $63      ; FAC1 exponent
0064          FAC1_M1  = $64      ; FAC1 mantissa 1
0065          FAC1_M2  = $65      ; FAC1 mantissa 2
0066          FAC1_M3  = $66      ; FAC1 mantissa 3
0067          FAC1_M4  = $67      ; FAC1 mantissa 4
0068          FAC1_SI  = $68      ; FAC1 sign

0069          DEGREE   = $69

              ; Floating point accumulator 2

006a          FAC2_EX  = $6a
006b          FAC2_M1  = $6b
006c          FAC2_M2  = $6c
006d          FAC2_M3  = $6d
006e          FAC2_M4  = $6e
006f          FAC2_SI  = $6f

              ; String pointer and FAC sign comparison and FAC rounding

0070          STRPTR  = $70       ; string pointer & FAC variables

              ; this address is sometimes used as high btye for the STRPTR
              ; and as rounding byte (5th. byte of mantissa) for FAC1

0071          FROUND  = $71       ; FAC1 mantissa 5 = rounding byte

              ; Temporary pointers and indices used in many BASIC routines

0072          STRNG2  = $72       ; temp BASIC execute/array pointer low byte/index
0074          AUTINC  = $74       ; WORD: auto increment value (0 = OFF)
0076          MVDFLG  = $76       ; (graphics) memory reserved flag
0077          TEMP_A  = $77       ; temporary byte value
0078          KEYSIZ  = $78       ; string length and counter
0079          SYNTMP  = $79       ; short term temporary value
007a          DS_LEN  = $7a       ; length  of DS$ (disk status)
007b          DS_ADR  = $7b       ; address of DS$ (disk status)

007d          TOS     = $7d       ; Top Of Basic Stack
007f          RUNMOD  = $7f       ; $80 = RUN [line], $40 = RUN <filename>, $00 = direct

              ; DOSFLA flags for parsing BASIC 4 DOS commands

              ; bit 0: $01 = source Filename given
              ; bit 1: $02 = target Filename given       : start address
              ; bit 2: $04 = logical address set in LA   : end   address
              ; bit 3: $08 = primary address set in FA
              ; bit 4: $10 = source drive set
              ; bit 5: $20 = target drive set
              ; bit 6: $40 = W (Write) or L (record)     : bank
              ; bit 7: $80 = Save and replace flag '@'

0080          DOSFLA  = $80       ; DOS flags A

              ; DOSFLB flags for parsing BLOAD/BSAVE arguments

              ; bit 0: $01 = bank given
              ; bit 1: $02 = BLOAD/BSAVE start address
              ; bit 2: $04 = BSAVE end address

0081          DOSFLB  = $81       ; DOS flags B

0082          OLDSTK  = $82       ; save stack pointer

              ; color modes

0083          COLSEL  = $83       ; color selected
0084          MULCO1  = $84       ; multi color 1
0085          MULCO2  = $85       ; multi color 2
0086          FG_COL  = $86       ; foreground color
0087          SCALE_X = $87       ; graphics scale X
0089          SCALE_Y = $89       ; graphics scale Y
008b          STOPNB  = $8b       ; PAINT comparison byte

008c          GRAPNT  = $8c       ; Graphics Pointer
008e          VTEMPA  = $8e       ; Temporaray pointer

              ; The STATUS byte is used to flag I/O errors or End-Of-Information
              ; A bit set to 1 indicates foloowing conditions:

              ; bit 0 : time out write
              ; bit 1 : time out read
              ; bit 2 : short block (tape)
              ; bit 3 : long  block (tape)
              ; bit 4 : verify error
              ; bit 5 : checksum error (tape)
              ; bit 6 : EOI (End Of Information)
              ; bit 7 : device not present

0090          STATUS  = $90

0091          STKEY   = $91       ; STOP key flag
0092          SVXT    = $92       ; tape timer
0093          K_VERCK = $93       ; verify flag and monitor variable

0094          C3PO    = $94       ; serial buffer flag
0095          BSOUR   = $95       ; serial output buffer

0096          SYNO    = $96       ; tape sync
0097          XSAV    = $97       ; save X register

              ; The number of currently open I/O files is stored here. The maximum
              ; number that can be open at one time is ten. The number stored here is
              ; used as the index to the end of the tables that hold the file numbers,
              ; device numbers, and secondary addresses.

0098          LDTND   = $98       ; open file count

              ; The default value of this location is 0.

0099          DFLTN   = $99       ; input device number

              ; number   device
              ; ------   ------
              ;  0      keyboard
              ;  1      cassette 1
              ;  2      serial RS232
              ;  3      screen (default)
              ;  4-31   serial IEC bus

009a          DFLTO   = $9a       ; output device number


009b          PRTY    = $9b       ; tape parity byte
009c          DPSW    = $9c       ; tape dipole switch

009d          MSGFLG  = $9d       ; kernal message flag
009e          PTR_LO  = $9e       ; pointer 1
009f          PTR_HI  = $9f       ; pointer 2

              ; These three locations form a counter which is updated 50 times a
              ; second on PAL computers and 60 times a second on NTSC computers.
              ; It serves as a software clock which counts the number of
              ; jiffies that have elapsed since the computer was turned on.
              ; After 24 * 60 * 60 * 60 jiffies, which is one day,
              ; the jiffy clock is reset to zero.
              ; On PAL systems an adjustment term is applied every 5th. jiffy.

00a0          JIFFY_CLOCK = $a0   ; 3 bytes jiffy clock at 50Hz (PAL) or 60Hz (NTSC)

00a3          R2D2    = $a3       ; serial bus
00a4          BSOUR1  = $a4       ; serial output buffer
00a5          CNTDN   = $a5       ; count down
00a6          BUFPT   = $a6       ; tape buffer pointer

00a7          RSI_In_Bit = $a7    ; RS232 Input bit
00a8          RSI_Count  = $a8    ; RS232 Input bit counter
00a9          RSI_Start  = $a9    ; RS232 Input start bit
00aa          RSI_Data   = $aa    ; RS232 Input data byte
00ab          RSI_Parity = $ab    ; RS232 Input parity

00ac          SAL     = $ac       ; Start Address Low
00ad          SAH     = $ad       ; Start Address High
00ae          EAL     = $ae       ; End   Address Low
00af          EAH     = $af       ; End   Address Hig


00b0          CMP0    = $b0       ; tape timer
00b1          CMP1    = $b1       ; tape timer

              ; These two locations point to the address of the tape buffer. This
              ; pointer is initialized to T_Buffer ($0b00).

00b2          TAPE1    = $b2      ; tape buffer pointer
00b4          RS_Count = $b4      ; RS232 output character bit counter
00b5          RS_Next  = $b5      ; RS232 next bit to transfer
00b6          RS_Out   = $b6      ; current RS232 output byte

              ; primary file descriptor

00b7          FNLEN     = $b7     ; filename length
00b8          LA        = $b8     ; Local     Address
00b9          SA        = $b9     ; Secondary Address
00ba          FA        = $ba     ; First     Address (unit)
00bb          FNADR     = $bb     ; file name Address
00bd          RS_Parity = $bd     ; RS232 Output Parity
00be          FSBLK     = $be     ; tape block counter
00bf          DRIVE     = $bf
00c0          CAS1      = $c0     ; tape drive motor flag

00c1          STAL    = $c1       ; start address low
00c2          STAH    = $c2       ; start address high
00c3          MEMUSS  = $c3       ; temporary pointer

00c5          DATA    = $c5       ; tape data byte
00c6          BA      = $c6       ; bank for load/save/verify
00c7          FNBANK  = $c7       ; bank for filename

00c8          RIBUF   = $c8       ; pointer to RS232 input  buffer
00ca          ROBUF   = $ca       ; pointer to ES232 output buffer

00cc          KEYTAB  = $cc       ; pointer to keyboard decode table

00ce          IMPARM  = $ce       ; used by PRIMM (print immediate) subroutine

00d0          NDX     = $d0       ; number of keys buffered
00d1          KYNDX   = $d1       ; function key text counter
00d2          KEYIDX  = $d2       ; function key text index
00d3          SHFLAG  = $d3       ; flag for SHIFT, CONTROL, C=
00d4          SFDX    = $d4       ; index of key pressed
00d5          LSTX    = $d5       ; index of last key (for repeat)
00d6          CRSW    = $d6       ; CRT switch 0 = keyboard input, all else screen
00d7          MODE_80 = $d7       ; screen mode $00 = 40 col, $80 = 80 col

00d8          GRAPHM  = $d8       ; graphics mode
00d9          CHAREN  = $d9       ; character RAM/ROM flag
00da          E_Beg   = $da       ; Screen Editor Start Address
00dc          E_End   = $dc       ; Screen Editor End   Address
00de          E_Col   = $de       ; Screen Editor Temporary Variable
00df          E_Row   = $df       ; Screen Editor Temporary Variable

00e0          PNT     = $e0       ; Pointer to current text row
00e2          USER    = $e2       ; Pointer to text attribute

              ; window row/column counts start at 0

00e4          Margin_Bottom = $e4 ; SCBOT  default = 24
00e5          Margin_Top    = $e5 ; SCTOP  default =  0
00e6          Margin_Left   = $e6 ; SCLF   default =  0
00e7          Margin_Right  = $e7 ; SCRT   default = 39 or 79

00e8          CurLst_Row    = $e8 ; LSXP   last cursor row (bit 7 = continuation row)
00e9          CurLst_Col    = $e9 ; LSTP   last cursor column
00ea          Cursor_End    = $ea ; INDX   Input end column (default = last non blank)

00eb          Cursor_Row    = $eb ; TBLX   current cursor row
00ec          Cursor_Col    = $ec ; PNTR   current cursor column

00ed          LINES   = $ed       ; Screen lines
00ee          COLUMNS = $ee       ; Screen columns
00ef          DATAX   = $ef       ; Output character
00f0          LSTCHR  = $f0       ; Last character
00f1          E_Attribute   = $f1 ; Color/Attribute
00f2          TCOLOR  = $f2       ; Color/Attribute for Insert
00f3          E_Reverse     = $f3 ; Reverse flag
00f4          QTSW    = $f4       ; Quote switch
00f5          INSRT   = $f5       ; Insert mode
00f6          INSFLG  = $f6       ; Automatic insert
00f7          LOCKS   = $f7       ; Commodore/Shift lock
00f8          Scroll_Locked = $f8 ; Scroll lock
00f9          BEEPER  = $f9       ; Beeper mode

0100          STACK   = $0100     ; CPU runtime stack

              ; The lower part of the stack page is used as temporary storage
              ; and is therefore unusable for normal stack operations
              ; The upper four bytes $1fc - $1ff are used by the CRUNCH routine.
              ; This limits the runtime stack pointer to the range $fb - $37

              ; DOS Parameter block

              ; This parameter block is filled in by the DOS_Parser routine
              ; and used by all disk commands, like COPY, DLOAD, DIRECTORY, etc.

0110          DOS_COUNT   = $0110 ; length of format string
0111          DOS_FNLEN_1 = $0111 ; length of 1st. filename
0112          DOS_DRIVE_1 = $0112 ; drive # 1 (0 for single drive units)
0113          DOS_FNLEN_2 = $0113 ; length of 2nd. filename
0114          DOS_DRIVE_2 = $0114 ; drive # 2 (0 for single drive units)
0115          DOS_FNADR_2 = $0115 ; address of 2nd. filename
0117          DOS_BEG     = $0117 ; start address for BSAVE, BLOAD
0119          DOS_END     = $0119 ; end   address for BSAVE
011b          DOS_LA      = $011b ; Logical   Address for file operations
011c          DOS_FA      = $011c ; First     Address (unit)
011d          DOS_SA      = $011d ; Secondary Address (0 = relocatble LOAD)
011e          DOS_RL      = $011e ; Record Length for REL files
011f          DOS_BANK    = $011f ; Bank for LOAD/SAVE
0120          DOS_ID      = $0120 ; ID (two characters) for HEADER
0122          DOS_UNIT    = $0122 ; 2nd. unit for unit to unit COPY

              ; Formatted printing

              ; This parameter block is used by the PRINT USING command

0123          BNR         = $0123 ; begin pointer
0124          ENR         = $0124 ; end   pointer
0125          DOLR        = $0125 ; dollar flag
0126          FLAG        = $0126 ; comma  flag
0127          SWE         = $0127 ; counter
0128          USGN        = $0128 ; exponent sign
0129          UEXP        = $0129 ; exponent pointer
012a          VN          = $012a ; digits before decimal point
012b          CHSN        = $012b ; adjust flag
012c          VF          = $012c ; chars  before decimal point
012d          NF          = $012d ; chars  after  decimal point
012e          POSP        = $012e ; +/- flag position
012f          FESP        = $012f ; exponent flag
0130          ETOF        = $0130 ; switch
0131          CFORM       = $0131 ; counter
0132          SNO         = $0132 ; sign number
0133          BLFD        = $0133 ; space star flag
0134          BEGFD       = $0134 ; begin pointer
0135          LFOR        = $0135 ; length of format string
0136          ENDFD       = $0136 ; end pointer

              ; Input buffer

              ; The input buffer is capable to store the contents of two full lines
              ; in 80 column mode and a terminating zero byte and is therefore 161
              ; bytes long ($200 - $2a1). The four bytes before the input buffer
              ; ($1fc - $1ff) are used by the CRUNCH routine to store link address
              ; and line number just before the line itself. So after crunching the
              ; area starting at BUF-4 contains the full tokenized BASIC line.
              ; This is why the stack pointer is initialized with $fb.

0200          BUF         = $0200 ; 161 bytes

              ; a collection of utilities that are used to access RAM
              ; from bank 0 or bank 1 by modifying  the address byte of
              ; the LDA (ADR),Y   STA (ADR),Y   or   CMP (ADR),Y instruction.
              ; These routines are copied from ROM during startup

              ; *************
02a2            FETCH = $02a2
              ; *************
              ; 02a2 ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02a5 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02a8 aa        TAX        ; copy old value to X
              ; 02a9 b1 ff     LDA (**),Y ; load A from chosen bank
              ; 02ab 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02ae 60        RTS        ; return

              ; *************
02af            STASH = $02af
              ; *************
              ; 02af 48        PHA        ; save A
              ; 02b0 ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02b3 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02b6 aa        TAX        ; copy old value to X
              ; 02b7 68        PLA        ; restore A
              ; 02b8 91 ff     STA (**),Y ; store A to chosen bank
              ; 02ba 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02bd 60        RTS        ; return

              ; **************
02be            CMPARE = $02be
              ; **************
              ; 02be 48        PHA        ; save A
              ; 02bf ad 00 ff  LDA MMU_CR ; save old bank value
              ; 02c2 8e 00 ff  STX MMU_CR ; set new bank from X
              ; 02c5 aa        TAX        ; copy old value to X
              ; 02c6 68        PLA        ; restore A
              ; 02c7 d1 ff     CMP (**),Y ; compare A
              ; 02ca 8e 00 ff  STX MMU_CR ; restore bank value
              ; 02cd 60        RTS        ; return

              ; **************
02cd            JSRFAR = $02cd
              ; **************
              ; 02cd 20 e3 02  JSR JMPFAR ; jump to BANK,PC
              ; 02d0 85 06     STA A_REG  ; save A
              ; 02d2 86 07     STX X_REG  ; save X
              ; 02d4 84 08     STY Y_REG  ; save Y
              ; 02d6 08        PHP
              ; 02d7 68        PLA
              ; 02d8 85 05     STA S_REG  ; save SR
              ; 02da ba        TSX
              ; 02db 86 09     STX CHARAC ; save SP
              ; 02dd a9 00     LDA #0
              ; 02df 8d 00 ff  STA MMU_CR ; default bank
              ; 02e2 60        RTS        ; return

              ; **************
02e3            JMPFAR = $02e3
              ; **************
              ; 02e3 a2 00     LDX #0       ; for x=0 to 2
              ; 02e5 b5 03     LDA PC_HI,X  ; push PC and SR
              ; 02e7 48        PHA
              ; 02e8 e8        INX
              ; 02e9 e0 03     CPX #3
              ; 02eb 90 f8     BCC $02e5    ; -> loop
              ; 02ed a6 02     LDX BANK     ; # of bank configuration
              ; 02ef 20 6b ff  JSR K_GETCFG ; get  bank configuration
              ; 02f2 8d 00 ff  STA MMU_CR   ; set  bank configuration
              ; 02f5 a5 06     LDA A_REG    ; restore A
              ; 02f7 a6 07     LDX X_REG    ; restore X
              ; 02f9 a4 08     LDY Y_REG    ; restore Y
              ; 02fb 40        RTI          ; restore SR and JUMP to PC

              ; This vector is used when a BASIC prgram uses the USR() function.
              ; The vector should point to user defined code.
              ; It is initialised so that if you try to execute a USR call
              ; without changing them you will receive an ILLEGAL QUANTITY error.

02fc          USRVEC  = $02fc     ; pointer to user defined machine code

              ; A table of vectors for the most important BASIC routines
              ; These may be used for interception in order to add new functionality

0300          IERROR  = $0300     ; DEF_ERROR   BASIC error handler
0302          IMAIN   = $0302     ; DEF_MAIN    BASIC main loop
0304          ICRNCH  = $0304     ; DEF_CRUNCH  BASIC tokenizer
0306          IQPLOP  = $0306     ; DEF_QPLOP   BASIC statement lister
0308          IGONE   = $0308     ; DEF_GONE    BASIC interpret statement
030a          IEVAL   = $030a     ; DEF_EVAL    BASIC evaluate expressiom
030c          IESCLK  = $030c     ; DEF_ESCLK
030e          IESCPR  = $030e     ; DEF_ESCPR
0310          IESCEX  = $0310     ; DEF_ESCEX

              ; A table of vectors for kernal and ML monitor subroutines
              ; These may be used for interception in order to add new functionality
              ; Default values are copied from the ROM table vectss at $e073

0314          IIRQ    = $0314     ; IRQ_Normal
0316          IBRK    = $0316     ; Mon_Break
0318          INMI    = $0318     ; NMI_Normal
031a          IOPEN   = $031a     ; OPEN
031c          ICLOSE  = $031c     ; CLOSE
031e          ICHKIN  = $031e     ; CHKIN
0320          ICKOUT  = $0320     ; CKOUT
0322          ICLRCH  = $0322     ; CLRCH
0324          IBASIN  = $0324     ; BASIN
0326          IBSOUT  = $0326     ; BSOUT
0328          ISTOP   = $0328     ; STOP
032a          IGETIN  = $032a     ; GEIIN
032c          ICLALL  = $032c     ; CLALL
032e          EXMON   = $032e     ; Mon_Command
0330          ILOAD   = $0330     ; D_LOADSP
0332          ISAVE   = $0332     ; D_SAVE

              ; A table of vectors for editor subroutines
              ; These may be used for interception in order to add new functionality
              ; Default values are copied from the ROM table Edit_Vectors at $c065

0334          CTLVEC  = $0334     ; Edit_Use_Ctrl
0336          SHFVEC  = $0336     ; Edit_Print_Shifted
0338          ESCVEC  = $0338     ; Edit_Escape_Switch
033a          KEYVEC  = $033a     ; Edit_Use_Scancode
033c          KEYCHK  = $033c     ; Edit_Use_Function_Key

033e          DECODE  = $033e

034a          KEYD    = $034a     ; keyboard buffer 10 bytes
0354          TABMAP  = $0354     ; bitmap for 80 TAB positions (10 bytes)
035e          BITABL  = $035e     ; bitmap for line concatenation flag (4 bytes)

              ; These three tables hold the address parameters for all open files
              ; they are 10 bytes long, which is the limit for the number of open files

0362          LAT     = $0362     ; table of logical   addresses
036c          FAT     = $036c     ; table of first     addresses
0376          SAT     = $0376     ; table of secondary addresses

              ; Basic CHRGET (pre increment) and CHRGOT (no increment) routine
              ; This routine is copied from ROM ($4279) in Init_BASIC
              ; It is the main routine to get new bytes from the current program.
              ; The routine fetches the byte from (TXTPTR) in bank 0 and switches
              ; back to bank configuration 15 after reading.
              ; This routine runs in common RAM and is therefore interceptable for
              ; BASIC interpreter extensions.
              ; Besides returning the byte value or character in A the flags are set:
              ; Zero-flag if the value was zero (0) or colon (:) both indicating an
              ; end of statement condition.
              ; Carry-flag if char is NOT numeric ('0'..'9')

              ; **************
0380            CHRGET = $0380
              ; **************
              ; 0380 e6 3d     INC TXTPTR      [5]
              ; 0382 d0 02     BNE CHRGOT      [2]
              ; 0384 e6 3e     INC TXTPTR+1    [5]
              ; **************
0386            CHRGOT = $0386
              ; **************
              ; 0386 8d 01 ff  STA MMU_LCRA    [4] ; bank 0
              ; 0389 a0 00     LDY #0          [2]
              ; 038b b1 3d     LDA (TXTPTR),Y  [5] ; load byte
              ; 038d 8d 03 ff  STA MMU_LCRC    [4] ; bank 15
              ; **************
0390            ISNUM = $0390
              ; **************
              ; 0390 c9 3a     CMP #':'        [2] ; end-of-statement
              ; 0392 b0 0a     BCS RET         [2] ; return for chars > '9' with C=1
              ; 0394 c9 20     CMP #' '        [2]
              ; 0396 f0 e8     BEQ CHRGET      [2] ; skip blanks
              ; 0398 38        SEC             [2]
              ; 0399 e9 30     SBC #'0'        [2] ; test for numeric digits
              ; 039b 38        SEC             [2]
              ; 039c e9 d0     SBC #$d0        [2] ; clear carry for chars < '0'
              ; 039e 60    RET RTS             [6] ; size = 31 [CHRGET]
                                                   ; time = 33 - 49

              ; ***************
039f            Fetch_0 = $039f
              ; ***************
              ; Input : A = address of ZP pointer
              ;         Y = index to be used
              ; Output: A = value read from (A),Y in bank 0

              ; 039f 8d a6 03  STA Fetch_0+7   [4] ; modify ZP address
              ; 03a2 8d 01 ff  STA MMU_LCRA    [4]
              ; 03a5 b1 00     LDA (0),Y       [5] ; <-- ZP address modified
              ; 03a7 8d 03 ff  STA MMU_LCRC    [4] ; back to ROM / RAM bank 0
              ; 03aa 60        RTS             [6] ; size = 12 [Fetch_0]
                                                   ; time = 23

              ; ***************
03ab            Fetch_1 = $03ab
              ; ***************
              ; Input : A = address of ZP pointer
              ;         Y = index to be used
              ; Output: A = value read from (A),Y in bank 1

              ; 03ab 8d a6 03  STA Fetch_1+7       ; modify ZP address
              ; 03ae 8d 01 ff  STA MMU_LCRB
              ; 03b1 b1 00     LDA (0),Y           ; <-- ZP address modified
              ; 03b3 8d 03 ff  STA MMU_LCRD        ; back to ROM / RAM bank 1
              ; 03b6 60        RTS

              ; ********************
03b7            Get_INDEXA_1 = $03b7
              ; ********************
              ; 03b7 8d 02 ff  STA MMU_LCRB
              ; 03ba b1 24     LDA (INDEXA),Y
              ; 03bc 8d 04 ff  STA MMU_LCRD
              ; 03bf 60        RTS

              ; ********************
03c0            Get_INDEXB_0 = $03c0
              ; ********************
              ; 03c0 8d 01 ff  STA MMU_LCRA
              ; 03c3 b1 26     LDA (INDEXB),Y
              ; 03c5 8d 03 ff  STA MMU_LCRC
              ; 03c8 60        RTS

              ; **************
03c9            INDTXT = $03c9
              ; **************
              ; 03c9 8d 01 ff  STA MMU_LCRA
              ; 03cc b1 3d     LDA (TXTPTR),Y
              ; 03ce 8d 03 ff  STA MMU_LCRC
              ; 03d1 60        RTS

              ; Whenever a NULL string descriptor is needed this address, pointing
              ; to three zero bytes, is used. E.g. if a string variable
              ; without value is created. Also comparisons, wether a descriptor is
              ; allocated or not is done via comparisons of the descriptor address
              ; with the address of the NULL descriptor.

03d2          NULL_DESC = $03d2   ; These 3 bytes must contain zeroes permanently

              ; The BASIC command BANK sets this location to the user defined value
              ; It is used in subsequent calls to LOAD, SAVE, FETCH, STASH, SYS,
              ; PEEK, POKE  etc.

03d5          USER_BANK = $03d5   ; User defined bank configuration

03d6          TMPDES    = $03d6   ; space for two temporary address pointer
03da          STR_BANK  = $03da   ; bank for string to be parsed
03db          SAVSIZ    = $03db   ; string descriptor for sprite storage
03df          BITS      = $03df   ; FAC1 overflow
03e0          SPRTMP    = $03e0   ; temporary storage for TXTPTR

03e2          FG_BG     = $03e2   ; foreground background nibbles combined
03e3          FG_MC1    = $03e3   ; foreground multicolor 1

              ; This routine is copied from ROM_DMA = $f85a

              ; ***************
03f0            RAM_DMA = $03f0
              ; ***************
              ; 03f0 ae 00 ff  LDX MMU_CR
              ; 03f3 8c 01 df  STY DMA_CMD
              ; 03f6 8d 00 ff  STA MMU_CR
              ; 03f9 8e 00 ff  STX MMU_CR
              ; 03fc 60        RTS


              ; The default position of the VIC screen RAM used in text mode

0400          VIC_TEXT      = $0400 ; bank 0 : 40 x 25 charcters ($400 - $7e7)
0400          VAR_START     = $0400 ; bank 1 : start of BASIC variable storage

0800          BASIC_STACK   = $0800 ; 512 byte stack for loops and GOSUB calls

0a00          RESET_VECTOR  = $0a00 ; used for cold start and monitor exit
0a02          DEJAVU        = $0a02 ; a value of $a5 indicates, that the routine had been run
0a03          PALNTS        = $0a03 ; $ff = PAL (50 hz),  $00 = NTSC (60 Hz)
0a04          INIT_STATUS   = $0a04 ; RESET and NMI status
0a05          MEM_BOT       = $0a05 ; bottom of banked RAM, default = $1c00
0a07          MEM_TOP       = $0a07 ; top    of banked RAM, default = $ff00
0a09          IRQTMP        = $0a09 ; save value of (IIRQ) here

              ; variables used in tape I/O

0a0b          CASTON        = $0a0b ; timing value for tape operations
0a0c          KIKA26        = $0a0c ; temporary storage for tape operations
0a0d          STUPID        = $0a0d
0a0e          TIMOUT        = $0a0e

              ; variables used for the serial RS232 interface

0a0f          RS_Enable     = $0a0f ; Enable RS232 interface
0a10          RS_Control    = $0a10 ; Control register
0a11          RS_Command    = $0a11 ; Command register
0a12          RS_Baudrate   = $0a12 ; Baudrate
0a14          RS_Status     = $0a14 ; Status
                                    ; 7... .... BREAK  detected
                                    ; .6.. .... DSR    missing
                                    ; ...4 .... CTS    missing
                                    ; .... 3... input  buffer empty
                                    ; .... .2.. input  buffer overflow
                                    ; .... ..1. FRAME  error
                                    ; .... ...0 PARITY error

0a15          RS_Bits       = $0a15 ; Length of character
0a16          RS_Timer_Lo   = $0a16 ; Baudrate corrected for TIMER low
0a17          RS_Timer_Hi   = $0a17 ; Baudrate corrected for TIMER high
0a18          RS_IBP_End    = $0a18 ; Input  Buffer Pointer End
0a19          RS_IBP_Beg    = $0a19 ; Input  Buffer Pointer Begin
0a1a          RS_OBP_Beg    = $0a1a ; Output Buffer Pointer Begin
0a1b          RS_OBP_End    = $0a1b ; Output Buffer Pointer End

0a1c          Fast_IEC      = $0a1c ; Flag for fast IEC I/O
                                    ; 7... .... fast IEC
                                    ; .6.. .... burst mode
                                    ; .... ...0 fast

              ; These three locations form a counter which is updated 50 times a
              ; second, and serves as a software clock which counts the number of
              ; jiffies that have elapsed since the computer was turned on.
              ; European computers running at 50 Hz add an additional count every
              ; 5th. jiffy in order to compensate the lower interrupt frequency.
              ; After 24 hours and one jiffy these locations are set back to $000000.

0a1d          JIFFY_COUNTDOWN         = $0a1d ; 3 byte jiffy clock
0a20          XMAX          = $0a20 ; max. length of keyboard queue (10)
0a21          PAUSE         = $0a21 ; Ctrl-S flag
0a22          RPTFLG        = $0a22 ; repeat flag: $80 = all, $40 = no, $00 = cursor
0a23          KOUNT         = $0a23 ; repeat speed delay (default = 4)
0a24          DELAY         = $0a24 ; initial repeat delay (default = 10)
0a25          LSTHF         = $0a25 ; Commodore-Shift dleay (default = 8)

0a26          BLNON         = $0a26 ; $40 = non blinking cursor
0a27          BLNSW         = $0a27 ; $00 = blinking on
0a28          BLNCT         = $0a28 ; blink count
0a29          GDBLN         = $0a29 ; save charcter under cursor
0a2a          GDCOL         = $0a2a ; save color    under cursor

              ; cursor mode in 80 column screen

              ; $80 = constant
              ; $60 = normal blinking
              ; $40 = fast blinking
              ; $20 = off

0a2b          CURMOD        = $0a2b ; Cursor Mode
0a2c          VSH_TEXT      = $0a2c ; VIC text      page
0a2d          VSH_BITMAP    = $0a2d ; VIC bitmap    page
0a2e          VDC_RAM_PAGE  = $0a2e ; VDC text      page
0a2f          VDC_ATT_PAGE  = $0a2f ; VDC attribute page
0a30          LINTMP        = $0a30 ; temporary variable
0a31          VDC_ROW       = $0a31 ; temporary row
0a32          VDC_COL       = $0a32 ; temporary column
0a33          VDC_ATT       = $0a33 ; temporary attribute
0a34          VSH_SPLIT     = $0a34 ; VIC split shadow register
0a35          FN_SAVE_X     = $0a35 ; Save X register while accessing filename
0a36          PAL_ADJ       = $0a36 ; adjust jiffy clock running at 50 Hz
0a37          VSH_SPEED     = $0a37 ; VIC system speed
0a38          VSH_SPR_ENA   = $0a38 ; VIC sprites enabled
0a39          VSH_Ctrl_1    = $0a39 ; VIC control register 1
0a3a          SPRITES       = $0a3a ; sprite enable flag
0a3b          VIC_RAM_PAGE  = $0a3b ; start of VIC text RAM
0a3c          VDC_UPDATE_LO = $0a3c ; pointer to VDC RAM
0a3d          VDC_UPDATE_HI = $0a3d ; pointer to VDC RAM

              ; This area is used to swap the contents of the zero page addresses
              ; $e0 - $fa in the case of screen swapping

0a40          ZP_SW_COL     = $0a40 ; swap area for alternate screen

              ; This area is used to swap the contents of the tabulator settings
              ; at TABMAP in the case of screen swapping

0a60          SWPMAP        = $0a60 ; swap area for tab positions

              ; storage area for the machine language monitor

0a80          M_Data        = $0a80  ; 32 bytes for hunt string
0aa0          M_Operand     = $0aa0  ; 10 bytes for operand
0aaa          M_Format      = $0aaa  ; bit pattern describing operand syntax
0aab          M_Op_Size     = $0aab  ; length of operand (0,1 or 2)
0aac          M_Mne         = $0aac  ; 3 bytes for assembler mnemonic
0aaf          M_Save_XR     = $0aaf  ; save X register
0ab1          M_Opcode      = $0ab1  ; opcode for assembler/disassembler
0ab2          M_Save_X      = $0ab2  ; save X register during banked RAM access
0ab3          M_Dir         = $0ab3  ; direction of memory block transfer
0ab4          M_Count       = $0ab4  ; unread bytes in input
0ab5          M_Number      = $0ab5  ; temporary variable
0ab6          M_Shift       = $0ab6  ; shifts for number conversion
0ab7          M_Temp        = $0ab7  ; temporary 20 bit value

0ac0          Module_Bank   = $0ac0  ; current bank for ROM module
0ac1          Module_Flags  = $0ac1  ; ROM module initialization flags
0ac5          DINFLAG       = $0ac5  ; ASCII/DIN mode and accent flag

              ; UNUSED      = $0ac6 - $0aff

              ; buffer areas

0b00          T_Buffer      = $0b00  ; 256 bytes tape buffer
0c00          R_Rece_Buffer = $0c00  ; 256 bytes RS232 serial receive buffer
0d00          R_Send_Buffer = $0d00  ; 256 bytes RS232 serial send    buffer
1000          PKYBUF        = $1000  ;  10 bytes for programmable function keys
100a          PKYDEF        = $100a  ; 246 bytes for function key assignment
1100          DOSSTR        = $1100  ;  49 bytes for DOS command/open string

              ; variables for BASIC graphics commands

1131          XPOS          = $1131  ; position
1133          YPOS          = $1133
1135          XDEST         = $1135  ; destination
1137          YDEST         = $1137
1139          XABS          = $1139  ; absolute value
113b          YABS          = $113b
113d          XSGN          = $113d  ; sign
113f          YSGN          = $113f
1141          FCT           = $1141
1145          ERRVAL        = $1145
1147          LESSER        = $1147
1148          GREATR        = $1148
1149          ANGSGN        = $1149  ; quadrant
114a          SINVAL        = $114a  ;   sine value in 16 bit floating point
114c          COSVAL        = $114c  ; cosine value in 16 bit floating point
114e          ANGCNT        = $114e
1150          XCIRCL        = $1150
1152          YCIRCL        = $1152
1154          XRADIUS       = $1154
1156          YRADIUS       = $1156
1158          ROTANG        = $1158
115a          YDIST2        = $115a
115c          ANGBEG        = $115c
115e          ANGEND        = $115e
1160          XRCOS         = $1160
1162          YRSIN         = $1162
1164          XRSIN         = $1164
1166          YRCOS         = $1166
1168          CHRPAG        = $1168
1169          BITCNT        = $1169
116a          SCALEM        = $116a
116b          WIDTH         = $116b
116c          FILFLG        = $116c
116d          BITMSK        = $116d
116e          NUMCNT        = $116e
116f          TRCFLG        = $116f

              ; RENUMBER variables

1170          Ren_Line_Lo   = $1170
1171          Ren_Line_Hi   = $1171
1172          Ren_Step_Lo   = $1172
1173          Ren_Step_Hi   = $1173

1174          T3            = $1174  ; used in MOVSPR and DIRECTORY
1175          T4            = $1175
1176          T5            = $1176

1177          VTEMP3        = $1177  ; used in LAY_MUL_X
1178          VTEMP4        = $1178  ; used in Get_Coordinates
1179          Rel_Abs_Flag  = $1179  ; realtive or absolut plot mode
117a          ADRAY1        = $117a  ; pointer to FAC1_To_Int_AY
117c          ADRAY2        = $117c  ; pointer to Integer_To_Real

117e          SPRITE_DATA   = $117e

              ; VIC shadow registers are used as working copies
              ; The contents are then copied to the VIC hardware registers
              ; while executing the BASIC_IRQ routine.

11d6          VSH           = $11d6    ; shadow of VIC = $d000
11e7          VSH_SS_COLL   = VSH + 17 ; sprite/sprite collision
11e9          VSH_LPX       = VSH + 19 ; light pen x
11ea          VSH_LPY       = VSH + 20 ; light pen y

11eb          CHARGEN_TEXT  = $11eb    ; character generator page for text     = $d8
11ec          CHARGEN_GRAF  = $11ec    ; character generator page for graphics = $d0

11ed          REC_SA        = $11ed    ; secondary address for RECORD command
1200          OLDLIN        = $1200    ; old line number
1202          OLDTXT        = $1202    ; old interpreter ointer

1204          PU_FILL       = $1204    ; default ' ' : print using fill character
1205          PU_COMMA      = $1205    ; default ',' : print using separator
1206          PU_DOT        = $1206    ; default '.' : print using decimal dot
1207          PU_MONEY      = $1207    ; default '$' : print using currency symbol

1208          ERRNUM        = $1208    ; error number ($ff = no error)
1209          ERRLIN        = $1209    ; linenumber of error
120b          TRAPNO        = $120b    ; linenumber for error trap ($ffxx = no trap)
120d          TMPTRP        = $120d    ; obsolete
120e          ERRTXT        = $120e    ; pointer to error position in BASIC source

1210          TEXT_TOP      = $1210    ; top of current   BASIC program text
1212          TEXT_MAX      = $1212    ; top of available BASIC program text
1214          TEXT_TMP      = $1214    ; temporary TEXT pointer
1216          TEXT_LIN      = $1216    ; temporary LINE number storage
1218          FUNC_USR      = $1218    ; JMP ($4c) and address for USR function

121b          RNDX          = $121b    ; last used random number as 5 byte float

1220          ARC_SEG       = $1220    ; plot intervall for plotting arcs or circles

              ; variables used for sound control in BASIC

1222          Snd_Tempo     = $1222    ; duration = 19.22 / Snd_Tempo [sec]
1223          Snd_Duration  = $1223    ; 16 bit duration for 3 voices
1229          Snd_Dur_Tmp   = $1229    ; 16 bit duration
122b          Snd_Octave    = $122b
122c          Snd_Sharp     = $122c
122d          Snd_Pitch     = $122d    ; 16 bit pitch

122f          VOICE = $122f
1230          WAVE0 = $1230
1233          DNOTE = $1233
1234          FLTSAV = $1234
1238          FLTFLG = $1238

1239          NIBBLE = $1239
123a          TONNUM = $123a
123b          TONVAL = $123b

123e          PARCNT = $123e
123f          ATKTAB = $123f
1249          SUSTAB = $1249
1253          WAVTAB = $1253
125d          PULSLO = $125d
1267          PULSHI = $1267
1271          FILTERS = $1271
1274          Old_Filter = $1274
1275          Old_Volume = $1275
1276          INT_TRIP_FLAG = $1276
1278          Light_Pen_Flag = $1278
1279          INT_ADR_LO = $1279
127c          INT_ADR_HI = $127c
127f          INT_VAL = $127f
1280          Collision_Type      = $1280
1281          Voice_Number        = $1281
1282          Sound_Duration_1_Lo = $1282
1283          Sound_Duration_2_Lo = $1283
1284          Sound_Duration_3_Lo = $1284
1285          Sound_Duration_1_Hi = $1285
1286          Sound_Duration_2_Hi = $1286
1287          Sound_Duration_3_Hi = $1287
1288          SOUND_MAX_LO        = $1288
128b          SOUND_MAX_HI        = $128b
128e          SOUND_MIN_LO        = $128e
1291          SOUND_MIN_HI        = $1291
1294          SOUND_DIR           = $1294
1297          SOUND_STEP_LO       = $1297
129a          SOUND_STEP_HI       = $129a
129d          SOUND_FREQ_LO       = $129d
12a0          SOUND_FREQ_HI       = $12a0
12a3          TEMP_TIME_LO        = $12a3
12a4          TEMP_TIME_HI        = $12a4
12a5          TEMP_MAX_LO         = $12a5
12a6          TEMP_MAX_HI         = $12a6
12a7          TEMP_MIN_LO         = $12a7
12a8          TEMP_MIN_HI         = $12a8
12a9          TEMP_DIRECTION      = $12a9
12aa          TEMP_STEP_LO        = $12aa
12ab          TEMP_STEP_HI        = $12ab
12ac          TEMP_FREQ_LO        = $12ac
12ad          TEMP_FREQ_HI        = $12ad
12ae          TEMP_PULSE_LO       = $12ae
12af          TEMP_PULSE_HI       = $12af
12b0          TEMP_WAVEFORM       = $12b0

12b1          POT_IEMP_1          = $12b1
12b2          POT_IEMP_2          = $12b2

12b3          Win_XL              = $12b3
12b4          Win_YL              = $12b4
12b5          Win_XH              = $12b5
12b6          Win_YH              = $12b6

12b7          SAVRAM              = $12b7

12fa          DEFMOD = $12fa
12fb          LINCNT = $12fb
12fc          SPRNUM = $12fc
12fd          IRQ_ACTIVE_FLAG = $12fd
1c00          RAMBOT = $1c00
1c01          PROGRAM_START = $1c01

1c00          COLOR_RAM = $1c00
2000          GRAFX_RAM = $2000

3e00          V3e00 = $3e00

              ; *************************************
              ; C-128 VIC (MOS 8564) Video Controller
              ; *************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $d000 |                  M0X                  | X coordinate sprite 0
              ; --+-------+---------------------------------------+------------------------
              ;  1| $d001 |                  M0Y                  | Y coordinate sprite 0
              ; --+-------+---------------------------------------+------------------------
              ;  2| $d002 |                  M1X                  | X coordinate sprite 1
              ; --+-------+---------------------------------------+------------------------
              ;  3| $d003 |                  M1Y                  | Y coordinate sprite 1
              ; --+-------+---------------------------------------+------------------------
              ;  4| $d004 |                  M2X                  | X coordinate sprite 2
              ; --+-------+---------------------------------------+------------------------
              ;  5| $d005 |                  M2Y                  | Y coordinate sprite 2
              ; --+-------+---------------------------------------+------------------------
              ;  6| $d006 |                  M3X                  | X coordinate sprite 3
              ; --+-------+---------------------------------------+------------------------
              ;  7| $d007 |                  M3Y                  | Y coordinate sprite 3
              ; --+-------+---------------------------------------+------------------------
              ;  8| $d008 |                  M4X                  | X coordinate sprite 4
              ; --+-------+---------------------------------------+------------------------
              ;  9| $d009 |                  M4Y                  | Y coordinate sprite 4
              ; --+-------+---------------------------------------+------------------------
              ; 10| $d00a |                  M5X                  | X coordinate sprite 5
              ; --+-------+---------------------------------------+------------------------
              ; 11| $d00b |                  M5Y                  | Y coordinate sprite 5
              ; --+-------+---------------------------------------+------------------------
              ; 12| $d00c |                  M6X                  | X coordinate sprite 6
              ; --+-------+---------------------------------------+------------------------
              ; 13| $d00d |                  M6Y                  | Y coordinate sprite 6
              ; --+-------+---------------------------------------+------------------------
              ; 14| $d00e |                  M7X                  | X coordinate sprite 7
              ; --+-------+---------------------------------------+------------------------
              ; 15| $d00f |                  M7Y                  | Y coordinate sprite 7
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 16| $d010 |M7X8|M6X8|M5X8|M4X8|M3X8|M2X8|M1X8|M0X8| MSBs of X coordinates
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 17| $d011 |RST8| ECM| BMM| DEN|RSEL|    YSCROLL   | Control register 1
              ; --+-------+----+----+----+----+----+--------------+------------------------
              ; 18| $d012 |                 RASTER                | VIC_RASTER counter
              ; --+-------+---------------------------------------+------------------------
              ; 19| $d013 |                  LPX                  | Light pen X
              ; --+-------+---------------------------------------+------------------------
              ; 20| $d014 |                  LPY                  | Light pen Y
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 21| $d015 | M7E| M6E| M5E| M4E| M3E| M2E| M1E| M0E| Sprite enabled
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 22| $d016 |  - |  - | RES| MCM|CSEL|    XSCROLL   | Control register 2
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 23| $d017 |M7YE|M6YE|M5YE|M4YE|M3YE|M2YE|M1YE|M0YE| Sprite Y expansion
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 24| $d018 |VM13|VM12|VM11|VM10|CB13|CB12|CB11|  - | Memory pointers
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 25| $d019 | IRQ|  - |  - |  - | ILP|IMMC|IMBC|IRST| Interrupt register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 26| $d01a |  - |  - |  - |  - | ELP|EMMC|EMBC|ERST| Interrupt enabled
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 27| $d01b |M7DP|M6DP|M5DP|M4DP|M3DP|M2DP|M1DP|M0DP| Sprite data priority
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 28| $d01c |M7MC|M6MC|M5MC|M4MC|M3MC|M2MC|M1MC|M0MC| Sprite multicolor
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 29| $d01d |M7XE|M6XE|M5XE|M4XE|M3XE|M2XE|M1XE|M0XE| Sprite X expansion
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 30| $d01e | M7M| M6M| M5M| M4M| M3M| M2M| M1M| M0M| Sprite-sprite collision
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 31| $d01f | M7D| M6D| M5D| M4D| M3D| M2D| M1D| M0D| Sprite-data collision
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 32| $d020 |  - |  - |  - |  - |         EC        | Border color
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 33| $d021 |  - |  - |  - |  - |        B0C        | Background color 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 34| $d022 |  - |  - |  - |  - |        B1C        | Background color 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 35| $d023 |  - |  - |  - |  - |        B2C        | Background color 2
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 36| $d024 |  - |  - |  - |  - |        B3C        | Background color 3
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 37| $d025 |  - |  - |  - |  - |        MM0        | Sprite multicolor 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 38| $d026 |  - |  - |  - |  - |        MM1        | Sprite multicolor 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 39| $d027 |  - |  - |  - |  - |        M0C        | Color sprite 0
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 40| $d028 |  - |  - |  - |  - |        M1C        | Color sprite 1
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 41| $d029 |  - |  - |  - |  - |        M2C        | Color sprite 2
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 42| $d02a |  - |  - |  - |  - |        M3C        | Color sprite 3
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 43| $d02b |  - |  - |  - |  - |        M4C        | Color sprite 4
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 44| $d02c |  - |  - |  - |  - |        M5C        | Color sprite 5
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 45| $d02d |  - |  - |  - |  - |        M6C        | Color sprite 6
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 46| $d02e |  - |  - |  - |  - |        M7C        | Color sprite 7
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 47| $d02f |  - |  - |  - |  - |  - | K2 | K1 | K0 | Keyboard control
              ; --+-------+----+----+----+----+-------------------+------------------------
              ; 48| $d030 |  - |  - |  - |  - |  - |  - |  - | MHz| Fast / Slow
              ; --+-------+----+----+----+----+-------------------+------------------------

d000          VIC = $d000

              ; **********************************************
              ; C-64 CIA1 (MOS 6526) Complex Interface Adapter
              ; **********************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $dc00 |                  PRA                  | Data port A
              ; --+-------+---------------------------------------+------------------------
              ;  1| $dc01 |                  PRB                  | Data port B
              ; --+-------+---------------------------------------+------------------------
              ;  2| $dc02 |                 DDRA                  | Data direction A
              ; --+-------+---------------------------------------+------------------------
              ;  3| $dc03 |                 DDRB                  | Data direction B
              ; --+-------+---------------------------------------+------------------------
              ;  4| $dc04 |                 TALO                  | Timer A low
              ; --+-------+---------------------------------------+------------------------
              ;  5| $dc05 |                 TAHI                  | Timer A high
              ; --+-------+---------------------------------------+------------------------
              ;  6| $dc06 |                 TBLO                  | Timer B low
              ; --+-------+---------------------------------------+------------------------
              ;  7| $dc07 |                 TBHI                  | Timer B high
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  8| $dc08 | S/A|  0 |  0 |  0 |       TODS        | Time Of Day [1/10 sec]
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  9| $dc09 |  0 |  TODS [10s]  |     TODS [1s]     | Time Of Day [sec]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 10| $dc0a |  0 |  TODM [10m]  |     TODM [1m]     | Time Of Day [min]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 11| $dc0b |AMPM|  TODH [10h]  |     TODH [1h]     | Time Of Day [hour]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 12| $dc0c |                  SDR                  | Serial Data Register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 13| $dc0d |MODE|  0 |  0 |IFLG|ISDR|IARM|ITBU|ITBA| Interrupt Control Reg.
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 14| $dc0e | Hz |DSDR|CNTP| ONE|CONT|TBUN|TBUN|STOP| Control Timer A
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 15| $dc0f |MODE|   TACT  | ONE|CONT|TAUN|TAUN|STOP| Control Timer B
              ; --+-------+----+----+----+----+----+----+----+----+------------------------

dc00          CIA1         = $DC00 ; base address
dc00          CIA1_KBD_COL = $DC00 ; CIA1 Peripheral data Register A : keyboard column
dc01          CIA1_KBD_ROW = $DC01 ; CIA1 Peripheral data Register B : keyboard row

                                   ; C64  keyboard matrix layout
                                   ;       c7   c6   c5   c4   c3   c2   c1   c0
                                   ;   +------------------------------------------------
                                   ; r7|  RUN    /    ,    N    V    X  LSH   DN
                                   ; r6|    Q   UP    @    O    U    T    E   F5
                                   ; r5|  CBM    =    :    K    H    F    S   F3
                                   ; r4|   SP  RSH    .    M    B    C    Z   F1
                                   ; r3|    2  HOM    -    0    8    6    4   F7
                                   ; r2|  CTL    ;    L    J    G    D    A  RGT
                                   ; r1|  LFT    *    P    I    Y    R    W  RET
                                   ; r0|    1    £    +    9    7    5    3  DEL

dc02          CIA1_DDRA  = $DC02   ; CIA1 Data Direction  Register A
dc03          CIA1_DDRB  = $DC03   ; CIA1 Data Direction  Register B
dc04          CIA1_TALO  = $DC04   ; CIA1 Timer A Low  register
dc05          CIA1_TAHI  = $DC05   ; CIA1 Timer A High register
dc06          CIA1_TBLO  = $DC06   ; CIA1 Timer B Low  register
dc07          CIA1_TBHI  = $DC07   ; CIA1 Timer B High register
dc08          CIA1_TODT  = $DC08   ; CIA1 Time Of Day 1/10 seconds
dc09          CIA1_TODS  = $DC09   ; CIA1 Time Of Day seconds
dc0a          CIA1_TODM  = $DC0A   ; CIA1 Time Of Day minutes
dc0b          CIA1_TODH  = $DC0B   ; CIA1 Time Of Day hours
dc0c          CIA1_SDR   = $DC0C   ; CIA1 Serial Data Register
dc0d          CIA1_ICR   = $DC0D   ; CIA1 Interrupt Control Register
dc0e          CIA1_CRA   = $DC0E   ; CIA1 Control Register A
dc0f          CIA1_CRB   = $DC0F   ; CIA1 Control Register B

              ; **********************************************
              ; C-64 CIA2 (MOS 6526) Complex Interface Adapter
              ; **********************************************

              ;  #| Adr.  |Bit7|Bit6|Bit5|Bit4|Bit3|Bit2|Bit1|Bit0| Function
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  0| $dd00 |                  PRA                  | Data port A
              ; --+-------+---------------------------------------+------------------------
              ;  1| $dd01 |                  PRB                  | Data port B
              ; --+-------+---------------------------------------+------------------------
              ;  2| $dd02 |                 DDRA                  | Data direction A
              ; --+-------+---------------------------------------+------------------------
              ;  3| $dd03 |                 DDRB                  | Data direction B
              ; --+-------+---------------------------------------+------------------------
              ;  4| $dd04 |                 TALO                  | Timer A low
              ; --+-------+---------------------------------------+------------------------
              ;  5| $dd05 |                 TAHI                  | Timer A high
              ; --+-------+---------------------------------------+------------------------
              ;  6| $dd06 |                 TBLO                  | Timer B low
              ; --+-------+---------------------------------------+------------------------
              ;  7| $dd07 |                 TBHI                  | Timer B high
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  8| $dd08 | S/A|  0 |  0 |  0 |       TODS        | Time Of Day [1/10 sec]
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ;  9| $dd09 |  0 |  TODS [10s]  |     TODS [1s]     | Time Of Day [sec]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 10| $dd0a |  0 |  TODM [10m]  |     TODM [1m]     | Time Of Day [min]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 11| $dd0b |AMPM|  TODH [10h]  |     TODH [1h]     | Time Of Day [hour]
              ; --+-------+----+--------------+-------------------+------------------------
              ; 12| $dd0c |                  SDR                  | Serial Data Register
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 13| $dd0d |MODE|  0 |  0 |IFLG|ISDR|IARM|ITBU|ITBA| Interrupt Control Reg.
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 14| $dd0e | Hz |DSDR|CNTP| ONE|CONT|TBUN|TBUN|STOP| Control Timer A
              ; --+-------+----+----+----+----+----+----+----+----+------------------------
              ; 15| $dd0f |MODE|   TACT  | ONE|CONT|TAUN|TAUN|STOP| Control Timer B
              ; --+-------+----+----+----+----+----+----+----+----+------------------------

              ; **********************************************
              ; C-64 CIA2 (MOS 6526) Complex Interface Adapter
              ; **********************************************

dd00          CIA2       = $DD00 ; base address

dd00          CIA2_PRA   = $DD00   ; CIA2 Peripheral data Register A

              ; bit 7:   IEC DATA  IN
              ; bit 6:   IEC CLOCK IN
              ; bit 5:   IEC DATA  OUT
              ; bit 4:   IEC CLOCK OUT
              ; bit 3:   IEC ATN   OUT
              ; bit 2:   RS232     OUT
              ; bit 1:   VA15
              ; bit 0:   VA14

dd01          CIA2_PRB   = $DD01   ; CIA2 Peripheral data Register B

              ; bit 7:   DSR Data Set Ready
              ; bit 6:   CTS Clear To Send
              ; bit 5:   DCD Data Carrier Detect
              ; bit 4:
              ; bit 3:   RI  Ring Indicator
              ; bit 2:   DTR Data Terminal Ready
              ; bit 1:   RTS Request To Send
              ; bit 0:   RXD Received Data

dd02          CIA2_DDRA  = $DD02   ; CIA2 Data Direction  Register A
dd03          CIA2_DDRB  = $DD03   ; CIA2 Data Direction  Register B
dd04          CIA2_TALO  = $DD04   ; CIA2 Timer A Low  register
dd05          CIA2_TAHI  = $DD05   ; CIA2 Timer A High register
dd06          CIA2_TBLO  = $DD06   ; CIA2 Timer B Low  register
dd07          CIA2_TBHI  = $DD07   ; CIA2 Timer B High register
dd08          CIA2_TODT  = $DD08   ; CIA2 Time Of Day 1/10 seconds
dd09          CIA2_TODS  = $DD09   ; CIA2 Time Of Day seconds
dd0a          CIA2_TODM  = $DD0A   ; CIA2 Time Of Day minutes
dd0b          CIA2_TODH  = $DD0B   ; CIA2 Time Of Day hours
dd0c          CIA2_SDR   = $DD0C   ; CIA2 Serial Data Register
dd0d          CIA2_ICR   = $DD0D   ; CIA2 Interrupt Control Register

              ; bit 7:   IRQ enable
              ; bit 6:
              ; bit 5:
              ; bit 4:   IRQ flag
              ; bit 3:   serial port full/empty
              ; bit 2:   ALARM
              ; bit 1:   TIMER B
              ; bit 0:   TIMER A

dd0e          CIA2_CRA   = $DD0E   ; CIA2 Control Register A
dd0f          CIA2_CRB   = $DD0F   ; CIA2 Control Register B

              ; key coordinates

007f          CTRL_COL = %01111111 ; $7f = col 7
00fb          CTRL_ROW = %11111011 ; $fb = row 2

007f          STND_COL = %01111111 ; $7f = col 7

dc0d          VIA2_IER = CIA1_ICR    ; CIA1 Interrupt Control Register
dc07          VIA2_T2CH= $DC07
dc06          VIA2_T2CL= $DC06
dc04          VIA2_T1CL= $DC04
dc05          VIA2_T1CH= $DC05

0028          COLS          =  40
0019          ROWS          =  25
0002          COLINK        =   2
0050          COLMAX        =  80
00d8          COLRAM_PAGE   = $D8
000e          Default_Color = 14   ; Light blue

d018          MEM_CONTROL   = $D018
dc07          IEC_TIM_H     = $DC07; CIA 1 TIH, timer high
dc0d          IEC_IFR       = CIA1_ICR    ; CIA 1 CRB, interrupt flag register
dd00          IEC_PCR       = $DD00; VIA 2 peripheral control register (PCR)
dd00          IEC_DRAN      = $DD00; CIA 2 DRA, IEC bus

              ; bit 7	IEC Bus Data  Input
              ;     6	IEC Bus Clock Input
              ;     5	IEC Bus Data  Output
              ;     4	IEC Bus Clock Output
              ;     3	IEC Bus ATN Signal Output
              ;     2 User port PA2
              ;   0-1 VIC memory address

dd01          RS2_DSR_CTS   = $DD01
dd0d          RS2_IRQ_REG   = CIA2_ICR
dd04          RS2_TIM_LOW   = $DD04
dd05          RS2_TIM_HIG   = $DD05
0008          IEC_ATN_BIT   = $08
0002          IEC_IFR_BIT   = $02
0010          IEC_CLK_BIT   = %00010000; $10
0020          IEC_DAT_BIT   = %00100000; $20
0004          RS232_C_BIT   = %00000100; $04


d011          VIC_Ctrl_1  = $d011    ; VIC control register 1
d012          VIC_RASTER  = $d012
d013          VIC_LPX     = $d013
d014          VIC_LPY     = $d014
d015          VIC_SPR_ENA = $d015
d016          VIC_Ctrl_2  = $d016
d018          VIC_Memory  = $d018
d019          VIC_IRQ_REG = $d019
d01a          VIC_IRQ_ENA = $d01a
d01c          Vd01c = $d01c
d01e          VIC_SS_COLL = $d01e
d020          Vd020 = $d020
d021          VIC_BG_COL = $d021
d025          Vd025 = $d025
d026          Vd026 = $d026
d027          Vd027 = $d027
d02f          VIC_KBD = $d02f
d030          VIC_SPEED = $d030

d400          SID_Freq_1 = $d400
d402          SID_Pulse_1 = $d402
d404          SID_Control_1 = $d404
d405          SID_Attack_1 = $d405
d406          SID_Sustain_1 = $d406
d407          SID_Freq_2 = $d407
d409          SID_Pulse_2 = $d409
d40b          SID_Control_2 = $d40b
d40c          SID_Attack_2 = $d40c
d40d          SID_Sustain_2 = $d40d
d40e          SID_Freq_3 = $d40e
d410          SID_Pulse_3 = $d410
d412          SID_Control_3 = $d412
d413          SID_Attack_3 = $d413
d414          SID_Sustain_3 = $d414
d415          SID_Cutoff = $d415
d417          SID_Resonance = $d417
d418          SID_Volume = $d418
d419          SID_POT_X = $d419

              ; MMU

d500          MMU_CONT = $d500
d501          MMU_PCRA = $d501
d505          MMU_MODE = $d505
d506          MMU_RAMC = $d506

              ; VDC

d600          VDC_Register = $d600
d601          VDC_Data = $d601

d800          VIC_COLOR_RAM = $d800

              ; DMA controller as used by the Commodore REU

df00          DMA_BASE   = $df00

              ; 7....... interrupt pending
              ; .6...... end of block
              ; ..5..... fault
              ; ...4.... size of RAM chips
              ; ....3210 version

df01          DMA_CMD    = $df01
df02          DMA_CBM_LO = $df02
df03          DMA_CBM_HI = $df03
df04          DMA_REU_LO = $df04
df05          DMA_REU_HI = $df05
df06          DMA_REU_BA = $df06
df07          DMA_CNT_LO = $df07
df08          DMA_CNT_HI = $df08

ff47          K_SPINIO  = $ff47
ff4a          K_CLOALL  = $ff4a
ff4d          K_C64     = $ff4d
ff50          K_DMA     = $ff50
ff53          K_BOOT    = $ff53
ff56          K_PHOENIX = $ff56
ff59          K_LKUPLA  = $ff59
ff5c          K_LKUPSA  = $ff5c
ff5f          K_SWAPPER = $ff5f
ff62          K_DLCHR   = $ff62
ff65          K_PFKEY   = $ff65
ff68          K_SETBNK  = $ff68
ff6b          K_GETCFG  = $ff6b
ff6e          K_JSRFAR  = $ff6e
ff71          K_JMPFAR  = $ff71
ff74          K_INDFET  = $ff74
ff77          K_INDSTA  = $ff77
ff7a          K_INDCMP  = $ff7a
ff7d          K_PRIMM   = $ff7d
ff80          K_VERSION = $ff80
ff81          K_CINT    = $ff81
ff84          K_IOINIT  = $ff84
ff87          K_RAMTAS  = $ff87
ff8a          K_RESTOR  = $ff8a
ff8d          K_VECTOR  = $ff8d
ff90          K_SETMSG  = $ff90
ff93          K_SECND   = $ff93
ff96          K_TKSA    = $ff96
ff99          K_MEMTOP  = $ff99
ff9c          K_MEMBOT  = $ff9c
ff9f          K_KEY     = $ff9f
ffa2          K_SETTMO  = $ffa2
ffa5          K_ACPTR   = $ffa5
ffa8          K_CIOUT   = $ffa8
ffab          K_UNTLK   = $ffab
ffae          K_UNLSN   = $ffae
ffb1          K_LISTN   = $ffb1
ffb4          K_TALK    = $ffb4
ffb7          K_READST  = $ffb7
ffba          K_SETLFS  = $ffba
ffbd          K_SETNAM  = $ffbd
ffc0          K_OPEN    = $ffc0
ffc3          K_CLOSE   = $ffc3
ffc6          K_CHKIN   = $ffc6
ffc9          K_CKOUT   = $ffc9
ffcc          K_CLRCH   = $ffcc
ffcf          K_BASIN   = $ffcf
ffd2          K_BSOUT   = $ffd2
ffd5          K_LOADSP  = $ffd5
ffd8          K_SAVESP  = $ffd8
ffdb          K_SETTIM  = $ffdb
ffde          K_RDTIM   = $ffde
ffe1          K_STOP    = $ffe1
ffe4          K_GETIN   = $ffe4
ffe7          K_CLALL   = $ffe7
ffea          K_UDTIM   = $ffea
ffed          K_SCRORG  = $ffed
fff0          K_PLOT    = $fff0
fff3          K_IOBASE  = $fff3

ff00          MMU_CR   = $ff00
ff01          MMU_LCRA = $ff01
ff02          MMU_LCRB = $ff02
ff03          MMU_LCRC = $ff03
ff04          MMU_LCRD = $ff04

              .STORE $B000, $1000, "b000.tedmon"

b000          * = $b000   ; *** 128.rom ***  Commodore 128

              ; *********************
b000            BASIC_MONITOR ; $b000
              ; *********************

b000 4c 21 b0           JMP Mon_Entry_By_Call

              ; *****************
b003            Mon_Break ; $b003
              ; *****************

b003 4c 09 b0           JMP Mon_Entry_By_Break

              ; *******************
b006            Mon_Command ; $b006
              ; *******************

b006 4c b2 b0           JMP Mon_Command_Switch

              ; ******************
b009            Mon_Entry_By_Break
              ; ******************

b009 20 7d ff           JSR K_PRIMM
b00c 0d 42 52           .BYTE "\rBREAK",7,0
b014 68                 PLA                 ; bank of interrupted program
b015 85 02              STA BANK
b017 a2 05              LDX #5
b019 68       MEBB_10   PLA
b01a 95 03              STA PC_HI,X         ; save CPU registers and flags
b01c ca                 DEX
b01d 10 fa              BPL MEBB_10
b01f 30 25              BMI Mon_Start       ; always

              ; *************************
b021            Mon_Entry_By_Call ; $b021
              ; *************************

b021 a9 00              LDA #0
b023 8d 00 ff           STA MMU_CR          ; system bank
b026 85 06              STA A_REG           ; clear register saves
b028 85 07              STA X_REG
b02a 85 08              STA Y_REG
b02c 85 05              STA S_REG
b02e a9 00              LDA #<BASIC_MONITOR ; default for PC save
b030 a0 b0              LDY #>BASIC_MONITOR
b032 85 04              STA PC_LO
b034 84 03              STY PC_HI
b036 a9 0f              LDA #15
b038 85 02              STA BANK            ; bank configuration for monitor
b03a 20 7d ff           JSR K_PRIMM
b03d 0d 4d 4f           .BYTE "\rMONITOR",0

              ; *****************
b046            Mon_Start ; $b046
              ; *****************

b046 d8                 CLD                 ; clear decimal mode
b047 ba                 TSX
b048 86 09              STX CHARAC          ; save stack pointer
b04a a9 c0              LDA #$c0            ; activate kernal and I/O messages
b04c 20 90 ff           JSR K_SETMSG        ; set message flag
b04f 58                 CLI                 ; enable interrupts

              ; ****************
b050            Mon_Print_Header
              ; ****************

b050 20 7d ff           JSR K_PRIMM         ; print register header
b053 0d 20 20           .BYTE "\r    PC  SR AC XR YR SP\r; "
b06d 1b 51 00           .BYTE $1b,$51,$00
b070 a5 02              LDA BANK
b072 20 d2 b8           JSR Mon_Bin_To_Hex
b075 8a                 TXA                 ; hex value of lower nibble
b076 20 d2 ff           JSR K_BSOUT         ; prinz bank as single hex
b079 a5 03              LDA PC_HI
b07b 20 c2 b8           JSR Mon_Hex
b07e a0 02              LDY #2
b080 b9 02 00 MPH_10    LDA BANK,Y          ; print all register values
b083 20 a5 b8           JSR Mon_Hex_Blank
b086 c8                 INY
b087 c0 08              CPY #8
b089 90 f5              BCC MPH_10

              ; ****************
b08b            Mon_Main ; $b08b
              ; ****************

b08b 20 b4 b8           JSR Mon_CR
b08e a2 00              LDX #0
b090 86 7a              STX DS_LEN
b092 20 cf ff MoMa_10   JSR K_BASIN
b095 9d 00 02           STA BUF,X
b098 e8                 INX
b099 e0 a1              CPX #161            ; max. buffer size
b09b b0 1f              BCS Mon_Error
b09d c9 0d              CMP #CR             ; end of input
b09f d0 f1              BNE MoMa_10
b0a1 a9 00              LDA #0
b0a3 9d ff 01           STA BUF-1,X         ; zero terminate buffer
b0a6 20 e9 b8 MoMa_20   JSR Mon_Get_Char
b0a9 f0 e0              BEQ Mon_Main
b0ab c9 20              CMP #' '
b0ad f0 f7              BEQ MoMa_20
b0af 6c 2e 03           JMP (EXMON)         ; JMP Mon_Command -> Switch

              ; **************************
b0b2            Mon_Command_Switch ; $b0b2
              ; **************************

b0b2 a2 15              LDX #21             ; # of commands
b0b4 dd e6 b0 MoCS_10   CMP cmdchr,X
b0b7 f0 0c              BEQ MoMa_30
b0b9 ca                 DEX
b0ba 10 f8              BPL MoCS_10

              ; *****************
b0bc            Mon_Error ; $b0bc
              ; *****************

b0bc 20 7d ff           JSR K_PRIMM
b0bf 1d 3f 00           .BYTE $1d,$3f,$00   ; cursor right, ?, 0
b0c2 4c 8b b0           JMP Mon_Main

              ; ***************
b0c5            MoMa_30 ; $b0c5
              ; ***************

b0c5 e0 13              CPX #19
b0c7 b0 12              BCS MoMa_40         ; -> Load, Save or Verify
b0c9 e0 0f              CPX #15
b0cb b0 13              BCS MoMa_50         ; -> numeric conversion
b0cd 8a                 TXA
b0ce 0a                 ASL A
b0cf aa                 TAX
b0d0 bd fd b0           LDA cmdtbl+1,X
b0d3 48                 PHA
b0d4 bd fc b0           LDA cmdtbl,X
b0d7 48                 PHA
b0d8 4c a7 b7           JMP Mon_Got_Aval    ; parse arguments, then execute function
b0db 85 93    MoMa_40   STA K_VERCK         ; store 'L', or 'S' or 'V'
b0dd 4c 37 b3           JMP Mon_Load_Save   ; load, save or verify
b0e0 4c b1 b9 MoMa_50   JMP Mon_Convert

              ; ****************
b0e3            Mon_Exit ; $b0e3
              ; ****************

b0e3 6c 00 0a           JMP (RESET_VECTOR)

b0e6 41 43 44 cmdchr    .BYTE "ACDFGHJMRTX@.>;"
b0f5 24 2b 26 cmdnum    .BYTE "$+&%"
b0f9 4c 53 56           .BYTE "LSV"
b0fc 05 b4    cmdtbl    .WORD Mon_Assemble     - 1  ; A
b0fe 30 b2              .WORD Mon_Compare -      1  ; C
b100 98 b5              .WORD Mon_Disassemble  - 1  ; D
b102 da b3              .WORD Mon_Fill         - 1  ; F
b104 d5 b1              .WORD Mon_Go           - 1  ; G
b106 cd b2              .WORD Mon_Hunt         - 1  ; H
b108 de b1              .WORD Mon_Gosub        - 1  ; J
b10a 51 b1              .WORD Mon_Memory       - 1  ; M
b10c 4f b0              .WORD Mon_Print_Header - 1  ; R
b10e 33 b2              .WORD Mon_Transfer     - 1  ; T
b110 e2 b0              .WORD Mon_Exit         - 1  ; X
b112 8f ba              .WORD Mon_Disk         - 1  ; @
b114 05 b4              .WORD Mon_Assemble     - 1  ; .
b116 aa b1              .WORD Mon_Set_Memory   - 1  ; >
b118 93 b1              .WORD Mon_Set_Register - 1  ; ;

              ; *****************
b11a            Mon_Fetch ; $b11a
              ; *****************

b11a 8e b2 0a           STX M_Save_X
b11d a6 68              LDX M_Cval+2
b11f a9 66              LDA #M_Cval
b121 78                 SEI
b122 20 74 ff           JSR K_INDFET
b125 58                 CLI
b126 ae b2 0a           LDX M_Save_X
b129 60                 RTS ;Size   16 [Mon_Fetch]

              ; *****************
b12a            Mon_Stash ; $b12a
              ; *****************

b12a 8e b2 0a           STX M_Save_X
b12d a2 66              LDX #M_Cval
b12f 8e b9 02           STX STASH+10
b132 a6 68              LDX M_Cval+2
b134 78                 SEI
b135 20 77 ff           JSR K_INDSTA
b138 58                 CLI
b139 ae b2 0a           LDX M_Save_X
b13c 60                 RTS ;Size   19 [Mon_Stash]

              ; *****************
b13d            Mon_Compa ; $b13d
              ; *****************

b13d 8e b2 0a           STX M_Save_X
b140 a2 66              LDX #M_Cval
b142 8e c8 02           STX CMPARE+10
b145 a6 68              LDX M_Cval+2
b147 78                 SEI
b148 20 7a ff           JSR K_INDCMP
b14b 58                 CLI
b14c 08                 PHP
b14d ae b2 0a           LDX M_Save_X
b150 28                 PLP
b151 60                 RTS ;Size   21 [Mon_Compa]

              ; ******************
b152            Mon_Memory ; $b152
              ; ******************

b152 b0 08              BCS MoMe_10         ; -> no end address
b154 20 01 b9           JSR Mon_Aval_To_Cval
b157 20 a7 b7           JSR Mon_Got_Aval
b15a 90 06              BCC MoMe_20
b15c a9 0b    MoMe_10   LDA #11             ; display 12 lines
b15e 85 60              STA M_Aval
b160 d0 15              BNE MoMe_40
b162 20 0e b9 MoMe_20   JSR Mon_Aval_Minus_Cval
b165 90 2a              BCC MoMe_Err
b167 a2 03              LDX #3              ; X = 3
b169 24 d7              BIT MODE_80
b16b 10 01              BPL MoMe_30         ; -> 40 column screen
b16d e8                 INX                 ; X = 4
b16e 46 62    MoMe_30   LSR M_Aval+2      ; Aval /= (bytes per line)
b170 66 61              ROR M_Aval+1
b172 66 60              ROR M_Aval
b174 ca                 DEX
b175 d0 f7              BNE MoMe_30
b177 20 e1 ff MoMe_40   JSR K_STOP          ; test for STOP key
b17a f0 12              BEQ MoMe_60         ; -> STOP
b17c 20 e8 b1           JSR Mon_Dump_Row
b17f a9 08              LDA #8              ; display  8 bytes on 40 column screen
b181 24 d7              BIT MODE_80
b183 10 01              BPL MoMe_50
b185 0a                 ASL A               ; display 16 bytes on 80 column screen
b186 20 52 b9 MoMe_50   JSR Mon_Add_Cval
b189 20 22 b9           JSR Mon_Dec_Aval
b18c b0 e9              BCS MoMe_40
b18e 4c 8b b0 MoMe_60   JMP Mon_Main
b191 4c bc b0 MoMe_Err  JMP Mon_Error

              ; ************************
b194            Mon_Set_Register ; $b194
              ; ************************

b194 20 74 b9           JSR Mon_Aval_To_PCB          ; set PC
b197 a0 00              LDY #0
b199 20 a7 b7 MoSr_10   JSR Mon_Got_Aval
b19c b0 0a              BCS MoSr_20
b19e a5 60              LDA M_Aval
b1a0 99 05 00           STA S_REG,Y         ; SR AC XR YR SP
b1a3 c8                 INY
b1a4 c0 05              CPY #5
b1a6 90 f1              BCC MoSr_10
b1a8 4c 8b b0 MoSr_20   JMP Mon_Main

              ; **********************
b1ab            Mon_Set_Memory ; $b1ab
              ; **********************

b1ab b0 1c              BCS MoSM_30
b1ad 20 01 b9           JSR Mon_Aval_To_Cval
b1b0 a0 00              LDY #0
b1b2 20 a7 b7 MoSM_10   JSR Mon_Got_Aval
b1b5 b0 12              BCS MoSM_30
b1b7 a5 60              LDA M_Aval
b1b9 20 2a b1           JSR Mon_Stash
b1bc c8                 INY
b1bd 24 d7              BIT MODE_80
b1bf 10 04              BPL MoSM_20         ; -> 40 columns
b1c1 c0 10              CPY #16
b1c3 90 ed              BCC MoSM_10
b1c5 c0 08    MoSM_20   CPY #8
b1c7 90 e9              BCC MoSM_10
b1c9 20 7d ff MoSM_30   JSR K_PRIMM
b1cc 1b 4f 91           .BYTE ESC,'O',$91,0 ; clear attributes
b1d0 20 e8 b1           JSR Mon_Dump_Row
b1d3 4c 8b b0           JMP Mon_Main

              ; **************
b1d6            Mon_Go ; $b1d6
              ; **************

b1d6 20 74 b9           JSR Mon_Aval_To_PCB
b1d9 a6 09              LDX CHARAC
b1db 9a                 TXS
b1dc 4c 71 ff           JMP K_JMPFAR

              ; *****************
b1df            Mon_Gosub ; $b1df
              ; *****************

b1df 20 74 b9           JSR Mon_Aval_To_PCB
b1e2 20 6e ff           JSR K_JSRFAR
b1e5 4c 8b b0           JMP Mon_Main

              ; ********************
b1e8            Mon_Dump_Row ; $b1e8
              ; ********************

b1e8 20 b4 b8           JSR Mon_CR
b1eb a9 3e              LDA #'>'
b1ed 20 d2 ff           JSR K_BSOUT
b1f0 20 92 b8           JSR Mon_Hex_Cval        ; address
b1f3 a0 00              LDY #0
b1f5 f0 03              BEQ MoDR_20         ; always

b1f7 20 a8 b8 MoDR_10   JSR Mon_Blank
b1fa 20 1a b1 MoDR_20   JSR Mon_Fetch
b1fd 20 c2 b8           JSR Mon_Hex          ; memory byte
b200 c8                 INY
b201 c0 08              CPY #8              ; 40 columns
b203 24 d7              BIT MODE_80
b205 10 02              BPL MoDR_30         ; -> 40 column screen
b207 c0 10              CPY #16             ; 80 columns
b209 90 ec    MoDR_30   BCC MoDR_10         ; -> loop
b20b 20 7d ff           JSR K_PRIMM
b20e 3a 12 00           .BYTE ':',$12,0     ; separator to text dump

b211 a0 00              LDY #0              ; fall through to text dump
b213 20 1a b1 MoDR_40   JSR Mon_Fetch
b216 48                 PHA
b217 29 7f              AND #$7f            ; remove reverse bit
b219 c9 20              CMP #' '            ; printable ?
b21b 68                 PLA
b21c b0 02              BCS MoDR_50
b21e a9 2e              LDA #'.'            ; use dot for unprintable chars
b220 20 d2 ff MoDR_50   JSR K_BSOUT
b223 c8                 INY
b224 24 d7              BIT MODE_80
b226 10 04              BPL MoDR_60
b228 c0 10              CPY #16             ; 80 columns
b22a 90 e7              BCC MoDR_40
b22c c0 08    MoDR_60   CPY #8              ; 40 columns
b22e 90 e3              BCC MoDR_40
b230 60                 RTS ;Size   73 [Mon_Dump_Row]

              ; *******************
b231            Mon_Compare ; $b231
              ; *******************

b231 a9 00              LDA #0
b233 2c                 BIT

              ; ********************
b234            Mon_Transfer ; $b234
              ; ********************

b234 a9 80              LDA #$80
b236 85 93              STA K_VERCK         ; $80 = Transfer, $00 = Compare
b238 a9 00              LDA #0
b23a 8d b3 0a           STA M_Dir
b23d 20 83 b9           JSR Mon_Range       ; Cval, TEMPS (Bval = range)
b240 b0 05              BCS MoTr_10
b242 20 a7 b7           JSR Mon_Got_Aval    ; Aval = target address
b245 90 03              BCC MoTr_15
b247 4c bc b0 MoTr_10   JMP Mon_Error

b24a 24 93    MoTr_15   BIT K_VERCK
b24c 10 2c              BPL MoTr_25         ; -> Compare is indepent of direction
b24e 38                 SEC
b24f a5 66              LDA M_Cval
b251 e5 60              SBC M_Aval
b253 a5 67              LDA M_Cval+1
b255 e5 61              SBC M_Aval+1      ; source (Cval) >= target (Aval) ?
b257 b0 21              BCS MoTr_25         ; -> yes, do a forward copy
b259 a5 63              LDA M_Bval        ; otherwise we need a backward copy
b25b 65 60              ADC M_Aval
b25d 85 60              STA M_Aval
b25f a5 64              LDA M_Bval+1
b261 65 61              ADC M_Aval+1
b263 85 61              STA M_Aval+1
b265 a5 65              LDA M_Bval+2
b267 65 62              ADC M_Aval+2
b269 85 62              STA M_Aval+2
b26b a2 02              LDX #2
b26d bd b7 0a MoTr_20   LDA M_Temp,X         ; Cval = TEMPS
b270 95 66              STA M_Cval,X
b272 ca                 DEX
b273 10 f8              BPL MoTr_20
b275 a9 80              LDA #$80
b277 8d b3 0a           STA M_Dir       ; do a backward transfer

b27a 20 b4 b8 MoTr_25   JSR Mon_CR
b27d a0 00              LDY #0
b27f 20 e1 ff MoTr_30   JSR K_STOP
b282 f0 47              BEQ MoTr_65
b284 20 1a b1           JSR Mon_Fetch       ; load byte (Cval)
b287 a2 60              LDX #M_Aval
b289 8e b9 02           STX STASH+10
b28c 8e c8 02           STX CMPARE+10
b28f a6 62    MoTr_35   LDX M_Aval+2      ; bank config
b291 78                 SEI
b292 24 93              BIT K_VERCK
b294 10 03              BPL MoTr_40         ; -> compare
b296 20 77 ff           JSR K_INDSTA        ; transfer
b299 a6 62    MoTr_40   LDX M_Aval+2      ; bank config
b29b 20 7a ff           JSR K_INDCMP        ; compare
b29e 58                 CLI
b29f f0 09              BEQ MoTr_45         ; -> equal
b2a1 20 92 b8           JSR Mon_Hex_Cval
b2a4 20 a8 b8           JSR Mon_Blank
b2a7 20 a8 b8           JSR Mon_Blank
b2aa 2c b3 0a MoTr_45   BIT M_Dir
b2ad 30 0b              BMI MoTr_50         ; -> backward: count down
b2af e6 60              INC M_Aval        ; count up
b2b1 d0 10              BNE MoTr_55
b2b3 e6 61              INC M_Aval+1
b2b5 d0 0c              BNE MoTr_55
b2b7 4c bc b0           JMP Mon_Error
b2ba 20 22 b9 MoTr_50   JSR Mon_Dec_Aval
b2bd 20 60 b9           JSR Mon_Dec_Cval
b2c0 4c c6 b2           JMP MoTr_60
b2c3 20 50 b9 MoTr_55   JSR Mon_Inc_Cval
b2c6 20 3c b9 MoTr_60   JSR Mon_Dec_Bval
b2c9 b0 b4              BCS MoTr_30         ; loop
b2cb 4c 8b b0 MoTr_65   JMP Mon_Main

              ; ****************
b2ce            Mon_Hunt ; $b2ce
              ; ****************

b2ce 20 83 b9           JSR Mon_Range
b2d1 b0 61              BCS MoHu_Err
b2d3 a0 00              LDY #0
b2d5 20 e9 b8           JSR Mon_Get_Char
b2d8 c9 27              CMP #APOSTR
b2da d0 16              BNE MoHu_20         ; -> read numeric value
b2dc 20 e9 b8           JSR Mon_Get_Char    ; read search string
b2df c9 00              CMP #0
b2e1 f0 51              BEQ MoHu_Err
b2e3 99 80 0a MoHu_10   STA M_Data,Y
b2e6 c8                 INY
b2e7 20 e9 b8           JSR Mon_Get_Char
b2ea f0 1b              BEQ MoHu_40
b2ec c0 20              CPY #32             ; maximum length of search pattern
b2ee d0 f3              BNE MoHu_10
b2f0 f0 15              BEQ MoHu_40         ; always

b2f2 8c 00 01 MoHu_20   STY STACK
b2f5 20 a5 b7           JSR Mon_Get_Aval    ; get numeric value
b2f8 a5 60    MoHu_30   LDA M_Aval
b2fa 99 80 0a           STA M_Data,Y
b2fd c8                 INY
b2fe 20 a7 b7           JSR Mon_Got_Aval
b301 b0 04              BCS MoHu_40         ; -> end of arguments
b303 c0 20              CPY #32             ; maximum length of search pattern
b305 d0 f1              BNE MoHu_30

b307 84 93    MoHu_40   STY K_VERCK         ; length of hunt string
b309 20 b4 b8           JSR Mon_CR
b30c a0 00    MoHu_50   LDY #0              ; start comparison
b30e 20 1a b1 MoHu_60   JSR Mon_Fetch
b311 d9 80 0a           CMP M_Data,Y
b314 d0 0e              BNE MoHu_70         ; -> no match
b316 c8                 INY
b317 c4 93              CPY K_VERCK
b319 d0 f3              BNE MoHu_60         ; -> more to compare
b31b 20 92 b8           JSR Mon_Hex_Cval        ; print matching address
b31e 20 a8 b8           JSR Mon_Blank
b321 20 a8 b8           JSR Mon_Blank
b324 20 e1 ff MoHu_70   JSR K_STOP          ; check for stop key
b327 f0 08              BEQ MoHu_80         ; -> user stop
b329 20 50 b9           JSR Mon_Inc_Cval    ; increment comparison address
b32c 20 3c b9           JSR Mon_Dec_Bval    ; decrement comparison counter
b32f b0 db              BCS MoHu_50         ; -> loop
b331 4c 8b b0 MoHu_80   JMP Mon_Main
b334 4c bc b0 MoHu_Err  JMP Mon_Error

              ; *********************
b337            Mon_Load_Save ; $b337
              ; *********************

b337 a0 01              LDY #1              ; Y = 1
b339 84 ba              STY FA              ; default device = 1 (tape)
b33b 84 b9              STY SA              ; default secondary address = 1
b33d 88                 DEY                 ; Y = 0
b33e 84 c6              STY BA              ; default bank = 0
b340 84 b7              STY FNLEN           ; no filename
b342 84 c7              STY FNBANK          ; default filename bank = 0
b344 84 90              STY STATUS          ; Clear STATUS
b346 a9 0a              LDA #>M_Data          ; put filename into M_Data
b348 85 bc              STA FNADR+1
b34a a9 80              LDA #<M_Data
b34c 85 bb              STA FNADR
b34e 20 e9 b8 MLS_10    JSR Mon_Get_Char
b351 f0 58              BEQ MLS_60          ; -> finished
b353 c9 20              CMP #' '
b355 f0 f7              BEQ MLS_10          ; -> skip blanks
b357 c9 22              CMP #QUOTE
b359 d0 15              BNE MLS_30          ; -> error: no quote
b35b a6 7a              LDX DS_LEN          ; X = buffer pointer
b35d bd 00 02 MLS_20    LDA BUF,X
b360 f0 49              BEQ MLS_60          ; -> end of buffer
b362 e8                 INX
b363 c9 22              CMP #QUOTE
b365 f0 0c              BEQ MLS_40          ; -> end of string
b367 91 bb              STA (FNADR),Y       ; store filename character
b369 e6 b7              INC FNLEN           ; update length
b36b c8                 INY                 ; increase length
b36c c0 11              CPY #17             ; length < 17 ?
b36e 90 ed              BCC MLS_20          ; -> OK loop

b370 4c bc b0 MLS_30    JMP Mon_Error
b373 86 7a    MLS_40    STX DS_LEN          ; save buffer pointer
b375 20 e9 b8           JSR Mon_Get_Char    ; more parameter ?
b378 f0 31              BEQ MLS_60          ; -> no
b37a 20 a7 b7           JSR Mon_Got_Aval    ; read numeric value
b37d b0 2c              BCS MLS_60          ; -> none
b37f a5 60              LDA M_Aval
b381 85 ba              STA FA              ; store value as device address
b383 20 a7 b7           JSR Mon_Got_Aval    ; read next value
b386 b0 23              BCS MLS_60          ; -> none
b388 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval = start address and bank
b38b 85 c6              STA BA              ; store bank from Aval+2
b38d 20 a7 b7           JSR Mon_Got_Aval    ; read next value
b390 b0 3f              BCS MLS_80          ; -> none
b392 20 b4 b8           JSR Mon_CR
b395 a6 60              LDX M_Aval          ; (X/Y) = end address
b397 a4 61              LDY M_Aval+1
b399 a5 93              LDA K_VERCK         ; 'L', 'S' or 'V'
b39b c9 53              CMP #'S'            ; SAVE ?
b39d d0 d1              BNE MLS_30          ; -> error: end address only with SAVE
b39f a9 00              LDA #0
b3a1 85 b9              STA SA
b3a3 a9 66              LDA #M_Cval         ; address of start address
b3a5 20 d8 ff           JSR K_SAVESP        ; perform SAVE
b3a8 4c 8b b0 MLS_50    JMP Mon_Main

              ; LOAD or VERIFY

b3ab a5 93    MLS_60    LDA K_VERCK         ; mode
b3ad c9 56              CMP #'V'            ; VERIFY ?
b3af f0 06              BEQ MLS_70
b3b1 c9 4c              CMP #'L'            ; LOAD ?
b3b3 d0 bb              BNE MLS_30          ; -> error: neither VERIFY nor LOAD
b3b5 a9 00              LDA #0              ; 0 = LOAD
b3b7 20 d5 ff MLS_70    JSR K_LOADSP        ; perform LOAD or VERIFY
b3ba a5 90              LDA STATUS
b3bc 29 10              AND #%0001 0000     ; $10 check verify error flag
b3be f0 e8              BEQ MLS_50          ; -> OK
b3c0 a5 93              LDA K_VERCK
b3c2 f0 ac              BEQ MLS_30          ; was loading -> OK
b3c4 20 7d ff           JSR K_PRIMM         ; start verify error message
b3c7 20 45 52           .BYTE " ERROR",0
b3ce 4c 8b b0           JMP Mon_Main

              ; only start address was given

b3d1 a6 66    MLS_80    LDX M_Cval
b3d3 a4 67              LDY M_Cval+1
b3d5 a9 00              LDA #0
b3d7 85 b9              STA SA
b3d9 f0 d0              BEQ MLS_60

              ; ****************
b3db            Mon_Fill ; $b3db
              ; ****************

b3db 20 83 b9           JSR Mon_Range       ; get fill range
b3de b0 23              BCS MoFi_Err        ; -> error
b3e0 a5 68              LDA M_Cval+2
b3e2 cd b9 0a           CMP M_Temp+2        ; compare bank in range
b3e5 d0 1c              BNE MoFi_Err
b3e7 20 a7 b7           JSR Mon_Got_Aval    ; iAval = fill byte
b3ea b0 17              BCS MoFi_Err
b3ec a0 00              LDY #0
b3ee a5 60    MoFi_10   LDA M_Aval          ; fill byte
b3f0 20 2a b1           JSR Mon_Stash       ; store it
b3f3 20 e1 ff           JSR K_STOP
b3f6 f0 08              BEQ MoFi_20
b3f8 20 50 b9           JSR Mon_Inc_Cval    ; increment fill address
b3fb 20 3c b9           JSR Mon_Dec_Bval    ; decrement fill count
b3fe b0 ee              BCS MoFi_10         ; -> loop
b400 4c 8b b0 MoFi_20   JMP Mon_Main
b403 4c bc b0 MoFi_Err  JMP Mon_Error

              ; ********************
b406            Mon_Assemble ; $b406
              ; ********************

              ; Strategy: convert operand to disassembler format
              ; Loop opcode from 0 to 255 and call disassembler
              ; until mnemonic and operand match.

b406 b0 3a              BCS MoAs_20         ; -> error: missing PC address
b408 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval := PC
b40b a2 00    MoAs_10   LDX #0
b40d 8e a1 0a           STX M_Operand+1
b410 8e b4 0a           STX M_Count
b413 20 e9 b8 MoAs_12   JSR Mon_Get_Char
b416 d0 07              BNE MoAs_14         ; -> continue
b418 e0 00              CPX #0
b41a d0 03              BNE MoAs_14
b41c 4c 8b b0           JMP Mon_Main        ; -> no input after address
b41f c9 20    MoAs_14   CMP #' '
b421 f0 e8              BEQ MoAs_10         ; -> skip blank
b423 9d ac 0a           STA M_Mne,X         ; store mnemonic character
b426 e8                 INX
b427 e0 03              CPX #3              ; length of a mnemonic
b429 d0 e8              BNE MoAs_12         ; -> loop for more
b42b ca       MoAs_16   DEX                 ; x = mnemonix index
b42c 30 17              BMI MoAs_22         ; -> loop finished
b42e bd ac 0a           LDA M_Mne,X         ; A = mnemonic charcater
b431 38                 SEC
b432 e9 3f              SBC #$3f            ; convert to 5-bit value
b434 a0 05              LDY #5
b436 4a       MoAs_18   LSR A               ; rotate 5-bit value into (M_Operand)
b437 6e a1 0a           ROR M_Operand+1
b43a 6e a0 0a           ROR M_Operand
b43d 88                 DEY
b43e d0 f6              BNE MoAs_18         ; -> loop bits of 5-bit character
b440 f0 e9              BEQ MoAs_16         ; -> loop mnemonic charcters

b442 4c bc b0 MoAs_20   JMP Mon_Error       ; -> error exit

b445 a2 02    MoAs_22   LDX #2              ; store operand after compressed mnemonic
b447 ad b4 0a MoAs_24   LDA M_Count         ; unread bytes in buffer
b44a d0 30              BNE MoAs_34         ; -> more to read
b44c 20 ce b7           JSR Mon_Eval        ; evaluate operand
b44f f0 29              BEQ MoAs_32         ; -> no characters evaluated
b451 b0 ef              BCS MoAs_20         ; -> error during evaluation
b453 a9 24              LDA #'$'
b455 9d a0 0a           STA M_Operand,X     ; start operand with '$'
b458 e8                 INX
b459 a5 62              LDA M_Aval+2        ; check bank byte of operand
b45b d0 e5              BNE MoAs_20         ; -> error: not allowed
b45d a0 04              LDY #4              ; default length of address
b45f ad b6 0a           LDA M_Shift         ; base (16,10,8,2)
b462 c9 08              CMP #8
b464 90 05              BCC MoAs_26         ; -> base = 2
b466 cc b4 0a           CPY M_Count
b469 f0 06              BEQ MoAs_28         ; -> no fillup necessary
b46b a5 61    MoAs_26   LDA M_Aval+1        ; high byte
b46d d0 02              BNE MoAs_28         ; -> not zero
b46f a0 02              LDY #2              ; insert '00' for high byte
b471 a9 30    MoAs_28   LDA #'0'            ; insert leading zero
b473 9d a0 0a MoAs_30   STA M_Operand,X
b476 e8                 INX
b477 88                 DEY
b478 d0 f9              BNE MoAs_30         ; loop for leading 0
b47a c6 7a    MoAs_32   DEC DS_LEN
b47c 20 e9 b8 MoAs_34   JSR Mon_Get_Char
b47f f0 0e              BEQ MoAs_36         ; -> end of operand
b481 c9 20              CMP #' '
b483 f0 c2              BEQ MoAs_24         ; skip blank
b485 9d a0 0a           STA M_Operand,X          ; store operand byte
b488 e8                 INX
b489 e0 0a              CPX #10             ; maximum operand length
b48b 90 ba              BCC MoAs_24         ; loop
b48d b0 b3              BCS MoAs_20         ; -> error: operand too long

b48f 86 63    MoAs_36   STX M_Bval          ; save X
b491 a2 00              LDX #0
b493 8e b1 0a           STX M_Opcode

b496 a2 00    MoAs_38   LDX #0              ; loop body for next opcode
b498 86 9f              STX PTR_HI            ; reset operand index
b49a ad b1 0a           LDA M_Opcode
b49d 20 59 b6           JSR Mon_Analyze_Opcode
b4a0 ae aa 0a           LDX M_Format
b4a3 86 64              STX M_Bval+1        ; save operand format
b4a5 aa                 TAX
b4a6 bd 61 b7           LDA Mon_Mne_Right,X     ; compressed left  half of mnemonic
b4a9 20 7f b5           JSR Mon_Match_Operand
b4ac bd 21 b7           LDA Mon_Mne_Left,X      ; compressed right half of mnemonic
b4af 20 7f b5           JSR Mon_Match_Operand   ;  6  5  4  3  2  1
b4b2 a2 06              LDX #6              ;  $  (  #  ,  )  ,
                                            ;     $  $  X     Y

b4b4 e0 03    MoAs_40   CPX #3              ; ",X" mode
b4b6 d0 14              BNE MoAs_44
b4b8 ac ab 0a           LDY M_Op_Size
b4bb f0 0f              BEQ MoAs_44         ; -> no operand
b4bd ad aa 0a MoAs_42   LDA M_Format
b4c0 c9 e8              CMP #$e8            ; 11101 << 3 (2 byte instructions)
b4c2 a9 30              LDA #'0'            ; high byte
b4c4 b0 1e              BCS MoAs_48         ; -> not a ZP mode
b4c6 20 7c b5           JSR Mon_Match_Double    ; match "00"
b4c9 88                 DEY
b4ca d0 f1              BNE MoAs_42
b4cc 0e aa 0a MoAs_44   ASL M_Format        ; next address mode bit
b4cf 90 0e              BCC MoAs_46         ; -> not set
b4d1 bd 14 b7           LDA Mon_Char1-1,X
b4d4 20 7f b5           JSR Mon_Match_Operand   ; match 1st. character
b4d7 bd 1a b7           LDA Mon_Char2-1,X
b4da f0 03              BEQ MoAs_46
b4dc 20 7f b5           JSR Mon_Match_Operand   ; match 2nd. character
b4df ca       MoAs_46   DEX
b4e0 d0 d2              BNE MoAs_40         ; -> loop next M_Format bit
b4e2 f0 06              BEQ MoAs_50         ; -> always

b4e4 20 7c b5 MoAs_48   JSR Mon_Match_Double    ; match "00"
b4e7 20 7c b5           JSR Mon_Match_Double    ; match "00"
b4ea a5 63    MoAs_50   LDA M_Bval
b4ec c5 9f              CMP PTR_HI            ; operand index
b4ee f0 03              BEQ MoAs_52
b4f0 4c 8b b5           JMP MaOp_10
b4f3 ac ab 0a MoAs_52   LDY M_Op_Size
b4f6 f0 32              BEQ MoAs_62         ; -> implicit mode
b4f8 a5 64              LDA M_Bval+1        ; copy of M_Format
b4fa c9 9d              CMP #$9d            ; relative (branches)
b4fc d0 23              BNE MoAs_58         ; -> no
b4fe a5 60              LDA M_Aval          ; handle branch instruction
b500 e5 66              SBC M_Cval
b502 aa                 TAX                 ; X = low byte of distance
b503 a5 61              LDA M_Aval+1
b505 e5 67              SBC M_Cval+1
b507 90 08              BCC MoAs_54
b509 d0 6e              BNE MoAs_Err        ; error: branch out of range
b50b e0 82              CPX #$82
b50d b0 6a              BCS MoAs_Err        ; error: branch out of range
b50f 90 08              BCC MoAs_56         ; always

b511 a8       MoAs_54   TAY
b512 c8                 INY
b513 d0 64              BNE MoAs_Err
b515 e0 82              CPX #$82
b517 90 60              BCC MoAs_Err
b519 ca       MoAs_56   DEX                 ; adjust distance by subtracting 2
b51a ca                 DEX
b51b 8a                 TXA
b51c ac ab 0a           LDY M_Op_Size
b51f d0 03              BNE MoAs_60         ; -> implicit mode

b521 b9 5f 00 MoAs_58   LDA FACTPB+1,Y      ; store operand bytes
b524 20 2a b1 MoAs_60   JSR Mon_Stash
b527 88                 DEY
b528 d0 f7              BNE MoAs_58
b52a ad b1 0a MoAs_62   LDA M_Opcode
b52d 20 2a b1           JSR Mon_Stash       ; store opcode
b530 20 ad b8           JSR Mon_BOL         ; Beginnig Of Line
b533 20 7d ff           JSR K_PRIMM
b536 41 20 1b           .BYTE "A ",ESC,"Q",0
b53b 20 dc b5           JSR Mon_Print_Code  ; print disassembled instruction
b53e ee ab 0a           INC M_Op_Size
b541 ad ab 0a           LDA M_Op_Size
b544 20 52 b9           JSR Mon_Add_Cval
b547 a9 41              LDA #'A'            ; A bxxxx " into keyboard buffer
b549 8d 4a 03           STA KEYD
b54c a9 20              LDA #' '
b54e 8d 4b 03           STA KEYD+1
b551 8d 51 03           STA KEYD+7
b554 a5 68              LDA M_Cval+2
b556 20 d2 b8           JSR Mon_Bin_To_Hex
b559 8e 4c 03           STX KEYD+2          ; bank
b55c a5 67              LDA M_Cval+1
b55e 20 d2 b8           JSR Mon_Bin_To_Hex
b561 8d 4d 03           STA KEYD+3          ; high byte
b564 8e 4e 03           STX KEYD+4
b567 a5 66              LDA M_Cval
b569 20 d2 b8           JSR Mon_Bin_To_Hex
b56c 8d 4f 03           STA KEYD+5          ; low byte
b56f 8e 50 03           STX KEYD+6
b572 a9 08              LDA #8              ; force length of keyboard buffer
b574 85 d0              STA NDX
b576 4c 8b b0           JMP Mon_Main
b579 4c bc b0 MoAs_Err  JMP Mon_Error

              ; ************************
b57c            Mon_Match_Double ; $b57c
              ; ************************

b57c 20 7f b5           JSR Mon_Match_Operand

              ; *************************
b57f            Mon_Match_Operand ; $b57f
              ; *************************

b57f 8e af 0a           STX M_Save_XR       ; save X
b582 a6 9f              LDX PTR_HI            ; operand index
b584 dd a0 0a           CMP M_Operand,X          ; compare A with operand byte
b587 f0 0a              BEQ MaOp_20         ; -> match
b589 68                 PLA
b58a 68                 PLA                 ; remove return address
b58b ee b1 0a MaOp_10   INC M_Opcode          ; next opcode
b58e f0 e9              BEQ MoAs_Err        ; -> error: no matching code found
b590 4c 96 b4           JMP MoAs_38         ; -> try next opcode
b593 e6 9f    MaOp_20   INC PTR_HI            ; increase operand index
b595 ae af 0a           LDX M_Save_XR       ; restore X
b598 60                 RTS ;Size   26 [Mon_Match_Operand]

              ; ***********************
b599            Mon_Disassemble ; $b599
              ; ***********************

b599 b0 08              BCS MoDi_10         ; -> no range: disassemble 20 lines
b59b 20 01 b9           JSR Mon_Aval_To_Cval    ; Cval := start of disassembly
b59e 20 a7 b7           JSR Mon_Got_Aval    ; Aval := end   of disassembly
b5a1 90 06              BCC MoDi_12
b5a3 a9 14    MoDi_10   LDA #20
b5a5 85 60              STA M_Aval
b5a7 d0 05              BNE MoDi_14         ; always

b5a9 20 0e b9 MoDi_12   JSR Mon_Aval_Minus_Cval ; Aval := range
b5ac 90 23              BCC MoDi_Err
b5ae 20 7d ff MoDi_14   JSR K_PRIMM
b5b1 0d 1b 51           .BYTE CR,ESC,"Q",0  ; CR, delete to end of line
b5b5 20 e1 ff           JSR K_STOP
b5b8 f0 14              BEQ MoDi_End
b5ba 20 d4 b5           JSR Mon_Dis_Code    ; Disassembler instruction
b5bd ee ab 0a           INC M_Op_Size      ; add opcode to operand length
b5c0 ad ab 0a           LDA M_Op_Size      ; total length of instruction
b5c3 20 52 b9           JSR Mon_Add_Cval    ; advance Cval
b5c6 ad ab 0a           LDA M_Op_Size
b5c9 20 24 b9           JSR Mon_Sub_Aval    ; subtract length from range
b5cc b0 e0              BCS MoDi_14         ; -> loop
b5ce 4c 8b b0 MoDi_End  JMP Mon_Main
b5d1 4c bc b0 MoDi_Err  JMP Mon_Error

              ; ********************
b5d4            Mon_Dis_Code ; $b5d4
              ; ********************

b5d4 a9 2e              LDA #'.'
b5d6 20 d2 ff           JSR K_BSOUT
b5d9 20 a8 b8           JSR Mon_Blank

              ; **********************
b5dc            Mon_Print_Code ; $b5dc
              ; **********************

b5dc 20 92 b8           JSR Mon_Hex_Cval        ; format address
b5df 20 a8 b8           JSR Mon_Blank
b5e2 a0 00              LDY #0
b5e4 20 1a b1           JSR Mon_Fetch
b5e7 20 59 b6           JSR Mon_Analyze_Opcode
b5ea 48                 PHA                 ; push opcode
b5eb ae ab 0a           LDX M_Op_Size      ; operand length
b5ee e8                 INX                 ; plus opcode
b5ef ca       MoPC_10   DEX
b5f0 10 0a              BPL MoPC_15         ; -> opcode present
b5f2 20 7d ff           JSR K_PRIMM
b5f5 20 20 20           .BYTE "   ",0       ; no opcode, print blanks
b5f9 4c 02 b6           JMP MoPC_20
b5fc 20 1a b1 MoPC_15   JSR Mon_Fetch       ; get instruction byte
b5ff 20 a5 b8           JSR Mon_Hex_Blank   ; print it
b602 c8       MoPC_20   INY
b603 c0 03              CPY #3              ; up to three bytes
b605 90 e8              BCC MoPC_10         ; -> loop
b607 68                 PLA                 ; pull opcode
b608 a2 03              LDX #3              ; print 3 character
b60a 20 a1 b6           JSR Mon_Mnemonic
b60d a2 06              LDX #6              ; process 6 format bits
b60f e0 03    MoPC_25   CPX #3              ; ,X mode
b611 d0 17              BNE MoPC_35
b613 ac ab 0a           LDY M_Op_Size      ; operand length
b616 f0 12              BEQ MoPC_35         ; -> no operand
b618 ad aa 0a MoPC_30   LDA M_Format
b61b c9 e8              CMP #$e8            ; 11101 << 3 (2 byte instructions)
b61d 08                 PHP
b61e 20 1a b1           JSR Mon_Fetch       ; get operand byte
b621 28                 PLP
b622 b0 1d              BCS MoPC_50         ; -> not a ZP mode
b624 20 c2 b8           JSR Mon_Hex
b627 88                 DEY
b628 d0 ee              BNE MoPC_30
b62a 0e aa 0a MoPC_35   ASL M_Format
b62d 90 0e              BCC MoPC_40
b62f bd 14 b7           LDA Mon_Char1-1,X   ; 1st. char of address mode
b632 20 d2 ff           JSR K_BSOUT
b635 bd 1a b7           LDA Mon_Char2-1,X   ; 2nd. char of address mode
b638 f0 03              BEQ MoPC_40
b63a 20 d2 ff           JSR K_BSOUT
b63d ca       MoPC_40   DEX
b63e d0 cf              BNE MoPC_25         ; loop operand format
b640 60                 RTS ;Size  101 [Mon_Print_Code]
b641 20 4d b6 MoPC_50   JSR MoPC_60
b644 18                 CLC
b645 69 01              ADC #1
b647 d0 01              BNE MoPC_55
b649 e8                 INX
b64a 4c 9f b8 MoPC_55   JMP Mon_Hex_Word    ; print word operand
b64d a6 67    MoPC_60   LDX M_Cval+1      ; add signed (A) to Cval
b64f a8                 TAY
b650 10 01              BPL MoPC_65
b652 ca                 DEX
b653 65 66    MoPC_65   ADC M_Cval
b655 90 01              BCC MoPC_Ret
b657 e8                 INX
b658 60       MoPC_Ret  RTS ;Size  125 [Mon_Print_Code]

              ; **************************
b659            Mon_Analyze_Opcode ; $b659
              ; **************************

              ; instruction pattern: aaa bbb cc
              ; aaa = instruction
              ; bbb = addressing mode
              ; cc  = group

              ; 1. analyze group cc
              ; ------------------------------------------
              ; cc = 00  one byte instructions, branches
              ; cc = 01  ORA,AND,EOR,ADC,STA,LDA,CMP,SBC
              ; cc = 10  ASL,ROL,LSR,ROR,STX,LDX,DEC,INC
              ; cc = 11  illegal opcodes

b659 a8                 TAY                 ; save opcode
b65a 4a                 LSR A               ; bit 0 -> carry
b65b 90 0b              BCC AnOp_10
b65d 4a                 LSR A               ; bit 1 -> carry
b65e b0 17              BCS AnOp_30         ; 11 -> no valid opcode
b660 c9 22              CMP #$22            ; invalid opcode $89 ?
b662 f0 13              BEQ AnOp_30
b664 29 07              AND #7              ; mask addressing mode bbb
b666 09 80              ORA #$80            ; set bit 7
b668 4a       AnOp_10   LSR A               ; A,X = aaa bbb (cc = x0)
b669 aa                 TAX                 ; A,X = aaa bb  (cc = 10)
b66a bd c3 b6           LDA Mon_Mode,X      ; get addressing mode index
b66d b0 04              BCS AnOp_20         ; branch on cc = 10
b66f 4a                 LSR A               ; move nibble for cc = 00
b670 4a                 LSR A
b671 4a                 LSR A
b672 4a                 LSR A
b673 29 0f    AnOp_20   AND #15             ; mask addressing mode index
b675 d0 04              BNE AnOp_40         ; branch for valid mode
b677 a0 80    AnOp_30   LDY #$80            ; set invalid opcode
b679 a9 00              LDA #0
b67b aa       AnOp_40   TAX                 ; X = addressing mode index
b67c bd 07 b7           LDA Mon_Address,X   ; A = addressing mode format
b67f 8d aa 0a           STA M_Format        ; format
b682 29 03              AND #3
b684 8d ab 0a           STA M_Op_Size
b687 98                 TYA                 ; restore opcode
b688 29 8f              AND #$8f            ; mask
b68a aa                 TAX
b68b 98                 TYA                 ; restore opcode
b68c a0 03              LDY #3
b68e e0 8a              CPX #$8a            ; TXS,TAX,TSX,DEX,NOP
b690 f0 0b              BEQ AnOp_70
b692 4a       AnOp_50   LSR A
b693 90 08              BCC AnOp_70
b695 4a                 LSR A
b696 4a       AnOp_60   LSR A
b697 09 20              ORA #$20
b699 88                 DEY
b69a d0 fa              BNE AnOp_60
b69c c8                 INY
b69d 88       AnOp_70   DEY
b69e d0 f2              BNE AnOp_50
b6a0 60                 RTS ;Size   72 [Mon_Analyze_Opcode]

              ; ********************
b6a1            Mon_Mnemonic ; $b6a1
              ; ********************

b6a1 a8                 TAY
b6a2 b9 21 b7           LDA Mon_Mne_Left,Y
b6a5 85 63              STA M_Bval
b6a7 b9 61 b7           LDA Mon_Mne_Right,Y
b6aa 85 64              STA M_Bval+1
b6ac a9 00    MoMn_10   LDA #0
b6ae a0 05              LDY #5              ; 5 bit encoding
b6b0 06 64    MoMn_20   ASL M_Bval+1
b6b2 26 63              ROL M_Bval
b6b4 2a                 ROL A
b6b5 88                 DEY
b6b6 d0 f8              BNE MoMn_20
b6b8 69 3f              ADC #$3f            ; add offset
b6ba 20 d2 ff           JSR K_BSOUT
b6bd ca                 DEX
b6be d0 ec              BNE MoMn_10
b6c0 4c a8 b8           JMP Mon_Blank

              ; ****************
b6c3            Mon_Mode ; $b6c3
              ; ****************

b6c3 40                 .BYTE $40           ; $4 BRK        $0 ---
b6c4 02                 .BYTE $02           ; $0 ---        $2 ASL zz
b6c5 45                 .BYTE $45           ; $4 PHP        $5 ASL A
b6c6 03                 .BYTE $03           ; $0 ---        $3 ASL nnnn

b6c7 d0                 .BYTE $d0           ; $d BPL oo     $0 ---
b6c8 08                 .BYTE $08           ; $0 ---        $8 ASL zz,X
b6c9 40                 .BYTE $40           ; $4 CLC        $0 ---
b6ca 09                 .BYTE $09           ; $0 ---        $9 ASL nnnn,X

b6cb 30                 .BYTE $30           ; $3 JSR nnnn   $0 --
b6cc 22                 .BYTE $22           ; $2 BIT zz     $2 ROL zz
b6cd 45                 .BYTE $45           ; $4 PLP        $5 ROL A
b6ce 33                 .BYTE $33           ; $3 BIT nnnn   $3 ROL nnnn

b6cf d0                 .BYTE $d0           ; $d BMI oo     $0 ---
b6d0 08                 .BYTE $08           ; $0 ---        $8 ROL zz,X
b6d1 40                 .BYTE $40           ; $4 SEC        $0 ---
b6d2 09                 .BYTE $09           ; $0 ---        $9 ROL nnnn,X

b6d3 40                 .BYTE $40           ; $4 RTI        $0 ---
b6d4 02                 .BYTE $02           ; $0 ---        $2 LSR zz
b6d5 45                 .BYTE $45           ; $4 PHA        $5 LSR A
b6d6 33                 .BYTE $33           ; $3 JMP nnnn   $3 LSR nnnn

b6d7 d0                 .BYTE $d0           ; $d BVC oo     $0 ---
b6d8 08                 .BYTE $08           ; $0 ---        $8 LSR zz,X
b6d9 40                 .BYTE $40           ; $4 CLI        $0 ---
b6da 09                 .BYTE $09           ; $0 ---        $9 LSR nnnn,X

b6db 40                 .BYTE $40           ; $4 RTS        $0 ---
b6dc 02                 .BYTE $02           ; $0 ---        $2 ROR zz
b6dd 45                 .BYTE $45           ; $4 PLA        $5 ROR A
b6de b3                 .BYTE $b3           ; $b JMP (nnnn) $3 ROR nnnn

b6df d0                 .BYTE $d0           ; $d BVS oo     $0 ---
b6e0 08                 .BYTE $08           ; $0 ---        $8 ROR zz,X
b6e1 40                 .BYTE $40           ; $4 SEI        $0 ---
b6e2 09                 .BYTE $09           ; $0 ---        $9 ROR nnnn,X

b6e3 00                 .BYTE $00           ; $0 ---        $0 ---
b6e4 22                 .BYTE $22           ; $2 STY zz     $2 STX zz
b6e5 44                 .BYTE $44           ; $4 DEY        $4 TXA
b6e6 33                 .BYTE $33           ; $3 STY nnnn   $3 STX nnnn

b6e7 d0                 .BYTE $d0           ; $d BCC oo     $0 ---
b6e8 8c                 .BYTE $8c           ; $8 STY zz,X   $c STX zz,Y
b6e9 44                 .BYTE $44           ; $4 TYA        $4 TXS
b6ea 00                 .BYTE $00           ; $0 ---        $0 ---

b6eb 11                 .BYTE $11           ; $1 LDY #      $1 LDX #
b6ec 22                 .BYTE $22           ; $2 LDY zz     $2 LDX zz
b6ed 44                 .BYTE $44           ; $4 TAY        $4 TAX
b6ee 33                 .BYTE $33           ; $3 LDY nnnn   $3 LDX nnnn

b6ef d0                 .BYTE $d0           ; $d BCS oo     $0 ---
b6f0 8c                 .BYTE $8c           ; $8 LDY zz,X   $c LDX zz,Y
b6f1 44                 .BYTE $44           ; $4 CLV        $4 TSX
b6f2 9a                 .BYTE $9a           ; $9 LDY nnnn,X $a LDX nnnn,Y

b6f3 10                 .BYTE $10           ; $1 CPY #      $0 ---
b6f4 22                 .BYTE $22           ; $2 CPY zz     $2 DEC zz
b6f5 44                 .BYTE $44           ; $4 INY        $4 DEX
b6f6 33                 .BYTE $33           ; $3 CPY nnnn   $3 DEC nnnn

b6f7 d0                 .BYTE $d0           ; $d BNE oo     $0 ---
b6f8 08                 .BYTE $08           ; $0 ---        $8 DEC zz,X
b6f9 40                 .BYTE $40           ; $4 CLD        $0 ---
b6fa 09                 .BYTE $09           ; $0 ---        $9 DEC nnnn,X

b6fb 10                 .BYTE $10           ; $1 CPX #      $0 ---
b6fc 22                 .BYTE $22           ; $2 CPX zz     $2 INC zz
b6fd 44                 .BYTE $44           ; $4 INX        $4 NOP
b6fe 33                 .BYTE $33           ; $3 CPX nnnn   $3 INC nnnn

b6ff d0                 .BYTE $d0           ; $d BEQ oo     $0 ---
b700 08                 .BYTE $08           ; $0 ---        $8 INC zz,X
b701 40                 .BYTE $40           ; $4 SED        $0 ---
b702 09                 .BYTE $09           ; $0 ---        $9 INC nnnn,X

b703 62                 .BYTE $62           ; $6 (zz,X)     $2 zz
b704 13                 .BYTE $13           ; $1 #          $3 nnnn
b705 78                 .BYTE $78           ; $7 (zz),Y     $8 zz,X
b706 a9                 .BYTE $a9           ; $a nnnn,Y     $9 nnnn,X

              ; *******************
b707            Mon_Address ; $b707
              ; *******************

              ;                 76543210
              ;                 --------
              ;                 x         $
              ;                  x        ($
              ;                   x       #$
              ;                    x      ,X
              ;                     x     )
              ;                      x    ,Y
              ;                       xx  length - 1

b707 00                  .BYTE %00000000  ; 0         implicit
b708 21                  .BYTE %00100001  ; 1  $#     immediate
b709 81                  .BYTE %10000001  ; 2  $zz    zeropage
b70a 82                  .BYTE %10000010  ; 3  $nnnn  absolute
b70b 00                  .BYTE %00000000  ; 4         implicit
b70c 00                  .BYTE %00000000  ; 5         implicit
b70d 59                  .BYTE %01011001  ; 6 ($zz,X) indexed indirect
b70e 4d                  .BYTE %01001101  ; 7 ($zz),Y indirect indexed
b70f 91                  .BYTE %10010001  ; 8 $zz,X   zeropage,X
b710 92                  .BYTE %10010010  ; 9 $nnnn,X absolute,X
b711 86                  .BYTE %10000110  ; a $nnnn,Y absolute,Y
b712 4a                  .BYTE %01001010  ; b ($nnnn) indirect
b713 85                  .BYTE %10000101  ; c $zz,Y   zeropage,Y
b714 9d                  .BYTE %10011101  ; d $nnnn   relative

              ;                 1    2    3    4    5    6
b715 2c 29 2c Mon_Char1  .BYTE ",", ")", ",", "#", "(", "$"
b71b 59 00 58 Mon_Char2  .BYTE "Y",  0 , "X", "$", "$",  0

              ; ********************
b721            Mon_Mne_Left ; $b721
              ; ********************

b721 1c                 .BYTE >"BRK"
b722 8a                 .BYTE >"PHP"
b723 1c                 .BYTE >"BPL"
b724 23                 .BYTE >"CLC"
b725 5d                 .BYTE >"JSR"
b726 8b                 .BYTE >"PLP"
b727 1b                 .BYTE >"BMI"
b728 a1                 .BYTE >"SEC"
b729 9d                 .BYTE >"RTI"
b72a 8a                 .BYTE >"PHA"
b72b 1d                 .BYTE >"BVC"
b72c 23                 .BYTE >"CLI"
b72d 9d                 .BYTE >"RTS"
b72e 8b                 .BYTE >"PLA"
b72f 1d                 .BYTE >"BVS"
b730 a1                 .BYTE >"SEI"
b731 00                 .BYTE >"???"
b732 29                 .BYTE >"DEY"
b733 19                 .BYTE >"BCC"
b734 ae                 .BYTE >"TYA"
b735 69                 .BYTE >"LDY"
b736 a8                 .BYTE >"TAY"
b737 19                 .BYTE >"BCS"
b738 23                 .BYTE >"CLV"
b739 24                 .BYTE >"CPY"
b73a 53                 .BYTE >"INY"
b73b 1b                 .BYTE >"BNE"
b73c 23                 .BYTE >"CLD"
b73d 24                 .BYTE >"CPX"
b73e 53                 .BYTE >"INX"
b73f 19                 .BYTE >"BEQ"
b740 a1                 .BYTE >"SED"
b741 00                 .BYTE >"???"
b742 1a                 .BYTE >"BIT"
b743 5b                 .BYTE >"JMP"
b744 5b                 .BYTE >"JMP"
b745 a5                 .BYTE >"STY"
b746 69                 .BYTE >"LDY"
b747 24                 .BYTE >"CPY"
b748 24                 .BYTE >"CPX"
b749 ae                 .BYTE >"TXA"
b74a ae                 .BYTE >"TXS"
b74b a8                 .BYTE >"TAX"
b74c ad                 .BYTE >"TSX"
b74d 29                 .BYTE >"DEX"
b74e 00                 .BYTE >"???"
b74f 7c                 .BYTE >"NOP"
b750 00                 .BYTE >"???"
b751 15                 .BYTE >"ASL"
b752 9c                 .BYTE >"ROL"
b753 6d                 .BYTE >"LSR"
b754 9c                 .BYTE >"ROR"
b755 a5                 .BYTE >"STX"
b756 69                 .BYTE >"LDX"
b757 29                 .BYTE >"DEC"
b758 53                 .BYTE >"INC"
b759 84                 .BYTE >"ORA"
b75a 13                 .BYTE >"AND"
b75b 34                 .BYTE >"EOR"
b75c 11                 .BYTE >"ADC"
b75d a5                 .BYTE >"STA"
b75e 69                 .BYTE >"LDA"
b75f 23                 .BYTE >"CMP"
b760 a0                 .BYTE >"SBC"

              ; *********************
b761            Mon_Mne_Right ; $b761
              ; *********************

b761 d8                 .BYTE <"BRK"
b762 62                 .BYTE <"PHP"
b763 5a                 .BYTE <"BPL"
b764 48                 .BYTE <"CLC"
b765 26                 .BYTE <"JSR"
b766 62                 .BYTE <"PLP"
b767 94                 .BYTE <"BMI"
b768 88                 .BYTE <"SEC"
b769 54                 .BYTE <"RTI"
b76a 44                 .BYTE <"PHA"
b76b c8                 .BYTE <"BVC"
b76c 54                 .BYTE <"CLI"
b76d 68                 .BYTE <"RTS"
b76e 44                 .BYTE <"PLA"
b76f e8                 .BYTE <"BVS"
b770 94                 .BYTE <"SEI"
b771 00                 .BYTE <"???"
b772 b4                 .BYTE <"DEY"
b773 08                 .BYTE <"BCC"
b774 84                 .BYTE <"TYA"
b775 74                 .BYTE <"LDY"
b776 b4                 .BYTE <"TAY"
b777 28                 .BYTE <"BCS"
b778 6e                 .BYTE <"CLV"
b779 74                 .BYTE <"CPY"
b77a f4                 .BYTE <"INY"
b77b cc                 .BYTE <"BNE"
b77c 4a                 .BYTE <"CLD"
b77d 72                 .BYTE <"CPX"
b77e f2                 .BYTE <"INX"
b77f a4                 .BYTE <"BEQ"
b780 8a                 .BYTE <"SED"
b781 00                 .BYTE <"???"
b782 aa                 .BYTE <"BIT"
b783 a2                 .BYTE <"JMP"
b784 a2                 .BYTE <"JMP"
b785 74                 .BYTE <"STY"
b786 74                 .BYTE <"LDY"
b787 74                 .BYTE <"CPY"
b788 72                 .BYTE <"CPX"
b789 44                 .BYTE <"TXA"
b78a 68                 .BYTE <"TXS"
b78b b2                 .BYTE <"TAX"
b78c 32                 .BYTE <"TSX"
b78d b2                 .BYTE <"DEX"
b78e 00                 .BYTE <"???"
b78f 22                 .BYTE <"NOP"
b790 00                 .BYTE <"???"
b791 1a                 .BYTE <"ASL"
b792 1a                 .BYTE <"ROL"
b793 26                 .BYTE <"LSR"
b794 26                 .BYTE <"ROR"
b795 72                 .BYTE <"STX"
b796 72                 .BYTE <"LDX"
b797 88                 .BYTE <"DEC"
b798 c8                 .BYTE <"INC"
b799 c4                 .BYTE <"ORA"
b79a ca                 .BYTE <"AND"
b79b 26                 .BYTE <"EOR"
b79c 48                 .BYTE <"ADC"
b79d 44                 .BYTE <"STA"
b79e 44                 .BYTE <"LDA"
b79f a2                 .BYTE <"CMP"
b7a0 c8                 .BYTE <"SBC"

b7a1 0d 20 20           .BYTE "\r   "       ; unused

              ; ********************
b7a5            Mon_Get_Aval ; $b7a5
              ; ********************

b7a5 c6 7a              DEC DS_LEN

              ; ********************
b7a7            Mon_Got_Aval ; $b7a7
              ; ********************

b7a7 20 ce b7           JSR Mon_Eval
b7aa b0 16              BCS MoGA_20
b7ac 20 e7 b8           JSR Mon_Got_Char
b7af d0 09              BNE MoGA_10         ; -> not at end
b7b1 c6 7a              DEC DS_LEN          ; buffer index
b7b3 ad b4 0a           LDA M_Count         ; bytes read
b7b6 d0 11              BNE MoGA_40         ; -> return with carry clear (OK)
b7b8 f0 0d              BEQ MoGA_30         ; -> return with carry set

b7ba c9 20    MoGA_10   CMP #' '
b7bc f0 0b              BEQ MoGA_40         ; delimiter blank
b7be c9 2c              CMP #','
b7c0 f0 07              BEQ MoGA_40         ; delimiter comma
b7c2 68       MoGA_20   PLA
b7c3 68                 PLA                 ; remove return address
b7c4 4c bc b0           JMP Mon_Error

b7c7 38       MoGA_30   SEC
b7c8 24                 .BYTE $24           ; skip CLC
b7c9 18       MoGA_40   CLC
b7ca ad b4 0a           LDA M_Count
b7cd 60                 RTS ;Size   39 [Mon_Got_Aval]

              ; ****************
b7ce            Mon_Eval ; $b7ce
              ; ****************

b7ce a9 00              LDA #0              ; clear result
b7d0 85 60              STA M_Aval
b7d2 85 61              STA M_Aval+1
b7d4 85 62              STA M_Aval+2
b7d6 8d b4 0a           STA M_Count         ; # of chars
b7d9 8a                 TXA                 ; save X
b7da 48                 PHA
b7db 98                 TYA                 ; save Y
b7dc 48                 PHA
b7dd 20 e9 b8 MoEv_10   JSR Mon_Get_Char
b7e0 d0 03              BNE MoEv_15
b7e2 4c 7e b8           JMP MoEv_65         ; -> finish

b7e5 c9 20    MoEv_15   CMP #' '
b7e7 f0 f4              BEQ MoEv_10         ; -> skip blanks

b7e9 a2 03              LDX #3
b7eb dd f5 b0 MoEv_20   CMP cmdnum,X        ; $ + & %
b7ee f0 06              BEQ MoEv_25
b7f0 ca                 DEX
b7f1 10 f8              BPL MoEv_20
b7f3 e8                 INX
b7f4 c6 7a              DEC DS_LEN          ; buffer index
b7f6 bc 8a b8 MoEv_25   LDY Mon_Base,X      ; 16 ($), 10 (+), 8 (&), 2 (%)
b7f9 bd 8e b8           LDA Mon_Shift,X     ;  4       3      3      1
b7fc 8d b6 0a           STA M_Shift
b7ff 20 e9 b8 MoEv_30   JSR Mon_Get_Char
b802 f0 7a              BEQ MoEv_65
b804 38                 SEC
b805 e9 30              SBC #'0'
b807 90 75              BCC MoEv_65         ; -> below '0' not alphanumeric
b809 c9 0a              CMP #10
b80b 90 06              BCC MoEv_35         ; -> inside (0 - 9)
b80d e9 07              SBC #7
b80f c9 10              CMP #16             ; hex ?
b811 b0 6b              BCS MoEv_65         ; -> invalid

b813 8d b5 0a MoEv_35   STA M_Number          ; store digit
b816 cc b5 0a           CPY M_Number          ; compare with base
b819 90 61              BCC MoEv_60         ; -> out of range
b81b f0 5f              BEQ MoEv_60         ; -> out of range
b81d ee b4 0a           INC M_Count         ; # of chars
b820 c0 0a              CPY #10             ; base 10 ?
b822 d0 0a              BNE MoEv_45         ; -> no

b824 a2 02              LDX #2
b826 b5 60    MoEv_40   LDA M_Aval,X      ; TEMPS = TENEXP
b828 9d b7 0a           STA M_Temp,X
b82b ca                 DEX
b82c 10 f8              BPL MoEv_40

b82e ae b6 0a MoEv_45   LDX M_Shift           ; shifts for base 16, 8 or 2
b831 06 60    MoEv_50   ASL M_Aval
b833 26 61              ROL M_Aval+1
b835 26 62              ROL M_Aval+2
b837 b0 43              BCS MoEv_60
b839 ca                 DEX
b83a d0 f5              BNE MoEv_50

b83c c0 0a              CPY #10             ; base 10 ?
b83e d0 22              BNE MoEv_55         ; -> no
b840 0e b7 0a           ASL M_Temp           ; M_Aval = TENEXP << 3 + TENEXP + TENEXP
b843 2e b8 0a           ROL M_Temp+1
b846 2e b9 0a           ROL M_Temp+2
b849 b0 31              BCS MoEv_60
b84b ad b7 0a           LDA M_Temp
b84e 65 60              ADC M_Aval
b850 85 60              STA M_Aval
b852 ad b8 0a           LDA M_Temp+1
b855 65 61              ADC M_Aval+1
b857 85 61              STA M_Aval+1
b859 ad b9 0a           LDA M_Temp+2
b85c 65 62              ADC M_Aval+2
b85e 85 62              STA M_Aval+2
b860 b0 1a              BCS MoEv_60         ; -> overflow

b862 18       MoEv_55   CLC
b863 ad b5 0a           LDA M_Number
b866 65 60              ADC M_Aval
b868 85 60              STA M_Aval
b86a 8a                 TXA
b86b 65 61              ADC M_Aval+1
b86d 85 61              STA M_Aval+1
b86f 8a                 TXA
b870 65 62              ADC M_Aval+2
b872 85 62              STA M_Aval+2
b874 b0 06              BCS MoEv_60         ; -> overflow
b876 29 f0              AND #%1111 0000     ; check bank value
b878 d0 02              BNE MoEv_60         ; -> overflow
b87a f0 83              BEQ MoEv_30         ; -> OK
b87c 38       MoEv_60   SEC
b87d 24                 .BYTE $24
b87e 18       MoEv_65   CLC
b87f 8c b6 0a           STY M_Shift
b882 68                 PLA
b883 a8                 TAY                 ; restore Y
b884 68                 PLA
b885 aa                 TAX                 ; restore X
b886 ad b4 0a           LDA M_Count         ; # of chars
b889 60                 RTS ;Size  188 [Mon_Eval]

b88a 10 0a 08 Mon_Base  .BYTE 16,10, 8, 2   ; supported bases for input
b88e 04 03 03 Mon_Shift .BYTE  4, 3, 3, 1   ; shifts for digit multiplying

              ; ********************
b892            Mon_Hex_Cval ; $b892
              ; ********************

b892 a5 68              LDA M_Cval+2
b894 20 d2 b8           JSR Mon_Bin_To_Hex
b897 8a                 TXA
b898 20 d2 ff           JSR K_BSOUT
b89b a5 66              LDA M_Cval
b89d a6 67              LDX M_Cval+1

              ; ********************
b89f            Mon_Hex_Word ; $b89f
              ; ********************

b89f 48                 PHA
b8a0 8a                 TXA
b8a1 20 c2 b8           JSR Mon_Hex
b8a4 68                 PLA

              ; *********************
b8a5            Mon_Hex_Blank ; $b8a5
              ; *********************

b8a5 20 c2 b8           JSR Mon_Hex

              ; *****************
b8a8            Mon_Blank ; $b8a8
              ; *****************

b8a8 a9 20              LDA #' '
b8aa 4c d2 ff           JMP K_BSOUT

              ; ***************
b8ad            Mon_BOL ; $b8ad
              ; ***************

b8ad 20 7d ff           JSR K_PRIMM
b8b0 0d 91 00           .BYTE CR,UP,0
b8b3 60                 RTS ;Size    7 [Mon_BOL]

              ; **************
b8b4            Mon_CR ; $b8b4
              ; **************

b8b4 a9 0d              LDA #CR
b8b6 4c d2 ff           JMP K_BSOUT

              ; **********************
b8b9            Mon_Blank_Line ; $b8b9
              ; **********************

b8b9 20 7d ff           JSR K_PRIMM
b8bc 0d 1b 51           .BYTE CR,ESC,"Q ",0
b8c1 60                 RTS ;Size    9 [Mon_Blank_Line]

              ; ***************
b8c2            Mon_Hex ; $b8c2
              ; ***************

b8c2 8e af 0a           STX M_Save_XR
b8c5 20 d2 b8           JSR Mon_Bin_To_Hex
b8c8 20 d2 ff           JSR K_BSOUT
b8cb 8a                 TXA
b8cc ae af 0a           LDX M_Save_XR
b8cf 4c d2 ff           JMP K_BSOUT

              ; **********************
b8d2            Mon_Bin_To_Hex ; $b8d2
              ; **********************

b8d2 48                 PHA
b8d3 20 dc b8           JSR Mon_Nib_Hex
b8d6 aa                 TAX
b8d7 68                 PLA
b8d8 4a                 LSR A
b8d9 4a                 LSR A
b8da 4a                 LSR A
b8db 4a                 LSR A

              ; *******************
b8dc            Mon_Nib_Hex ; $b8dc
              ; *******************

b8dc 29 0f              AND #15
b8de c9 0a              CMP #10
b8e0 90 02              BCC MoNH_10
b8e2 69 06              ADC #6
b8e4 69 30    MoNH_10   ADC #'0'
b8e6 60                 RTS ;Size   11 [Mon_Nib_Hex]

              ; ********************
b8e7            Mon_Got_Char ; $b8e7
              ; ********************

b8e7 c6 7a              DEC DS_LEN

              ; ********************
b8e9            Mon_Get_Char ; $b8e9
              ; ********************

b8e9 8e af 0a           STX M_Save_XR       ; save X
b8ec a6 7a              LDX DS_LEN          ; buffer index
b8ee bd 00 02           LDA BUF,X
b8f1 f0 06              BEQ MGNC_10         ; zero -> exit
b8f3 c9 3a              CMP #':'
b8f5 f0 02              BEQ MGNC_10         ; set Z flag for ':'
b8f7 c9 3f              CMP #'?'            ; set Z flag for '?'
b8f9 08       MGNC_10   PHP                 ; push flags
b8fa e6 7a              INC DS_LEN          ; buffer index
b8fc ae af 0a           LDX M_Save_XR       ; restore X
b8ff 28                 PLP                 ; pull flags
b900 60                 RTS ;Size   24 [Mon_Get_Char]

              ; ************************
b901            Mon_Aval_To_Cval ; $b901
              ; ************************

              ; Copy Aval (3 bytes at M_Aval) to Bval (3 bytes at M_Cval)

b901 a5 60              LDA M_Aval
b903 85 66              STA M_Cval
b905 a5 61              LDA M_Aval+1
b907 85 67              STA M_Cval+1
b909 a5 62              LDA M_Aval+2
b90b 85 68              STA M_Cval+2
b90d 60                 RTS ;Size   13 [Mon_Aval_To_Cval]

              ; ***************************
b90e            Mon_Aval_Minus_Cval ; $b90e
              ; ***************************

b90e 38                 SEC
b90f a5 60              LDA M_Aval
b911 e5 66              SBC M_Cval
b913 85 60              STA M_Aval
b915 a5 61              LDA M_Aval+1
b917 e5 67              SBC M_Cval+1
b919 85 61              STA M_Aval+1
b91b a5 62              LDA M_Aval+2
b91d e5 68              SBC M_Cval+2
b91f 85 62              STA M_Aval+2
b921 60                 RTS ;Size   20 [Mon_Aval_Minus_Cval]

              ; ********************
b922            Mon_Dec_Aval ; $b922
              ; ********************

b922 a9 01              LDA #1

              ; ********************
b924            Mon_Sub_Aval ; $b924
              ; ********************

b924 8d af 0a           STA M_Save_XR
b927 38                 SEC
b928 a5 60              LDA M_Aval
b92a ed af 0a           SBC M_Save_XR
b92d 85 60              STA M_Aval
b92f a5 61              LDA M_Aval+1
b931 e9 00              SBC #0
b933 85 61              STA M_Aval+1
b935 a5 62              LDA M_Aval+2
b937 e9 00              SBC #0
b939 85 62              STA M_Aval+2
b93b 60                 RTS ;Size   24 [Mon_Sub_Aval]

              ; ********************
b93c            Mon_Dec_Bval ; $b93c
              ; ********************

b93c 38                 SEC
b93d a5 63              LDA M_Bval
b93f e9 01              SBC #1
b941 85 63              STA M_Bval
b943 a5 64              LDA M_Bval+1
b945 e9 00              SBC #0
b947 85 64              STA M_Bval+1
b949 a5 65              LDA M_Bval+2
b94b e9 00              SBC #0
b94d 85 65              STA M_Bval+2
b94f 60                 RTS ;Size   20 [Mon_Dec_Bval]

              ; ********************
b950            Mon_Inc_Cval ; $b950
              ; ********************

b950 a9 01              LDA #1

              ; ********************
b952            Mon_Add_Cval ; $b952
              ; ********************

b952 18                 CLC
b953 65 66              ADC M_Cval
b955 85 66              STA M_Cval
b957 90 06              BCC MoAC_Ret
b959 e6 67              INC M_Cval+1
b95b d0 02              BNE MoAC_Ret
b95d e6 68              INC M_Cval+2
b95f 60       MoAC_Ret  RTS ;Size   14 [Mon_Add_Cval]

              ; ********************
b960            Mon_Dec_Cval ; $b960
              ; ********************

b960 38                 SEC
b961 a5 66              LDA M_Cval
b963 e9 01              SBC #1
b965 85 66              STA M_Cval
b967 a5 67              LDA M_Cval+1
b969 e9 00              SBC #0
b96b 85 67              STA M_Cval+1
b96d a5 68              LDA M_Cval+2
b96f e9 00              SBC #0
b971 85 68              STA M_Cval+2
b973 60                 RTS ;Size   20 [Mon_Dec_Cval]

              ; ***********************
b974            Mon_Aval_To_PCB ; $b974
              ; ***********************

b974 b0 0c              BCS MPCB_Ret
b976 a5 60              LDA M_Aval
b978 a4 61              LDY M_Aval+1
b97a a6 62              LDX M_Aval+2
b97c 85 04              STA PC_LO
b97e 84 03              STY PC_HI
b980 86 02              STX BANK
b982 60       MPCB_Ret  RTS ;Size   15 [Mon_Aval_To_PCB]

              ; *****************
b983            Mon_Range ; $b983
              ; *****************

              ; Parse a range of 20 bit values (16 bit address and 4 bit bank)

              ; Output: Bval  = range
              ;         Cval  = 1st. address
              ;         M_Temp = 2nd. address
              ;         C = 0 : OK,  C = 1 : Error

b983 b0 2a              BCS MoRa_Err
b985 20 01 b9           JSR Mon_Aval_To_Cval ; Cval  = 1st. address
b988 20 a7 b7           JSR Mon_Got_Aval     ; Aval  = 2nd. address
b98b b0 22              BCS MoRa_Err
b98d a5 60              LDA M_Aval           ; M_Temp = 2nd. address
b98f 8d b7 0a           STA M_Temp
b992 a5 61              LDA M_Aval+1
b994 8d b8 0a           STA M_Temp+1
b997 a5 62              LDA M_Aval+2
b999 8d b9 0a           STA M_Temp+2
b99c 20 0e b9           JSR Mon_Aval_Minus_Cval ; Aval = range
b99f a5 60              LDA M_Aval              ; Bval = range
b9a1 85 63              STA M_Bval
b9a3 a5 61              LDA M_Aval+1
b9a5 85 64              STA M_Bval+1
b9a7 a5 62              LDA M_Aval+2
b9a9 85 65              STA M_Bval+2
b9ab 90 02              BCC MoRa_Err
b9ad 18                 CLC
b9ae 24                 .BYTE $24
b9af 38       MoRa_Err  SEC
b9b0 60                 RTS ;Size   46 [Mon_Range]

              ; *******************
b9b1            Mon_Convert ; $b9b1
              ; *******************

b9b1 20 a5 b7           JSR Mon_Get_Aval    ; read value
b9b4 20 b9 b8           JSR Mon_Blank_Line
b9b7 a9 24              LDA #'$'            ; hex number
b9b9 20 d2 ff           JSR K_BSOUT
b9bc a5 62              LDA M_Aval+2
b9be f0 07              BEQ MoCo_10         ; bank value ?
b9c0 20 d2 b8           JSR Mon_Bin_To_Hex
b9c3 8a                 TXA
b9c4 20 d2 ff           JSR K_BSOUT
b9c7 a5 60    MoCo_10   LDA M_Aval
b9c9 a6 61              LDX M_Aval+1
b9cb 20 9f b8           JSR Mon_Hex_Word
b9ce 20 b9 b8           JSR Mon_Blank_Line
b9d1 a9 2b              LDA # '+'           ; decimal number
b9d3 20 d2 ff           JSR K_BSOUT
b9d6 20 07 ba           JSR Mon_Bin_BCD
b9d9 a9 00              LDA #0              ; suppress leading zeroes
b9db a2 08              LDX #8              ; # of digits
b9dd a0 03              LDY #3              ; bits per digit - 1
b9df 20 5d ba           JSR Mon_Print_Number
b9e2 20 b9 b8           JSR Mon_Blank_Line
b9e5 a9 26              LDA #'&'            ; octal number
b9e7 20 d2 ff           JSR K_BSOUT
b9ea a9 00              LDA #0              ; suppress leading zeroes
b9ec a2 08              LDX #8              ; # of digits
b9ee a0 02              LDY #2              ; bits per digit - 1
b9f0 20 47 ba           JSR Mon_Print_Aval
b9f3 20 b9 b8           JSR Mon_Blank_Line
b9f6 a9 25              LDA #'%'            ; dual number
b9f8 20 d2 ff           JSR K_BSOUT
b9fb a9 00              LDA #0              ; suppress leading zeroes
b9fd a2 18              LDX #24             ; # of digits
b9ff a0 00              LDY #0              ; bits per digit - 1
ba01 20 47 ba           JSR Mon_Print_Aval
ba04 4c 8b b0           JMP Mon_Main

              ; *******************
ba07            Mon_Bin_BCD ; $ba07
              ; *******************

              ; Input : Aval = 24 bit binary integer
              ; Output: M_Operand =  8 digit BCD  integer

ba07 20 01 b9           JSR Mon_Aval_To_Cval
ba0a a9 00              LDA #0
ba0c a2 07              LDX #7
ba0e 9d a0 0a MoBD_10   STA M_Operand,X
ba11 ca                 DEX
ba12 10 fa              BPL MoBD_10
ba14 ee a7 0a           INC M_Operand+7
ba17 a0 17              LDY #23             ; 24 bits for 3 bytes
ba19 08                 PHP
ba1a 78                 SEI                 ; disable interrupt
ba1b f8                 SED                 ; set decimal mode
ba1c 46 68    MoBD_20   LSR M_Cval+2
ba1e 66 67              ROR M_Cval+1
ba20 66 66              ROR M_Cval
ba22 90 0f              BCC MoBD_40         ; -> skip adding
ba24 18                 CLC
ba25 a2 03              LDX #3
ba27 bd a4 0a MoBD_30   LDA M_Operand+4,X
ba2a 7d a0 0a           ADC M_Operand,X
ba2d 9d a0 0a           STA M_Operand,X
ba30 ca                 DEX
ba31 10 f4              BPL MoBD_30
ba33 18       MoBD_40   CLC
ba34 a2 03              LDX #3
ba36 bd a4 0a MoBD_50   LDA M_Operand+4,X
ba39 7d a4 0a           ADC M_Operand+4,X
ba3c 9d a4 0a           STA M_Operand+4,X
ba3f ca                 DEX
ba40 10 f4              BPL MoBD_50         ; double M_Operand+4
ba42 88                 DEY
ba43 10 d7              BPL MoBD_20         ; loop for next bit
ba45 28                 PLP                 ; clear decimal and IRQ mode
ba46 60                 RTS ;Size   64 [Mon_Bin_BCD]

              ; **********************
ba47            Mon_Print_Aval ; $ba47
              ; **********************

ba47 48                 PHA
ba48 a5 60              LDA M_Aval
ba4a 8d a2 0a           STA M_Operand+2
ba4d a5 61              LDA M_Aval+1
ba4f 8d a1 0a           STA M_Operand+1
ba52 a5 62              LDA M_Aval+2
ba54 8d a0 0a           STA M_Operand
ba57 a9 00              LDA #0
ba59 8d a3 0a           STA M_Operand+3
ba5c 68                 PLA

              ; ************************
ba5d            Mon_Print_Number ; $ba5d
              ; ************************

              ; Input : A = 0 suppress printing of leading zeroes
              ;         X = # of digits to print
              ;         Y = # of shifts formatting
              ;         (M_Operand) := four byte binary number

ba5d 8d b4 0a           STA M_Count       ; suppress leading zeroes ?
ba60 8c b6 0a           STY M_Shift
ba63 ac b6 0a MoPN_10   LDY M_Shift
ba66 a9 00              LDA #0
ba68 0e a3 0a MoPN_20   ASL M_Operand+3
ba6b 2e a2 0a           ROL M_Operand+2
ba6e 2e a1 0a           ROL M_Operand+1
ba71 2e a0 0a           ROL M_Operand
ba74 2a                 ROL A
ba75 88                 DEY                 ; rotate SHIFT bytes into A
ba76 10 f0              BPL MoPN_20
ba78 a8                 TAY
ba79 d0 09              BNE MoPN_30         ; -> print digit if not 0
ba7b e0 01              CPX #1
ba7d f0 05              BEQ MoPN_30         ; -> print digit if last
ba7f ac b4 0a           LDY M_Count
ba82 f0 08              BEQ MoPN_40         ; -> skip leading zeroes
ba84 ee b4 0a MoPN_30   INC M_Count       ; -> switch off zero suppression
ba87 09 30              ORA #'0'            ; convert digit to ASCII
ba89 20 d2 ff           JSR K_BSOUT         ; print it
ba8c ca       MoPN_40   DEX                 ; # of digits
ba8d d0 d4              BNE MoPN_10
ba8f 60                 RTS ;Size   51 [Mon_Print_Number]

              ; ****************
ba90            Mon_Disk ; $ba90
              ; ****************

ba90 d0 03              BNE MonD_10
ba92 a2 08              LDX #8              ; default device
ba94 2c                 BIT
ba95 a6 60    MonD_10   LDX M_Aval
ba97 e0 04              CPX #4
ba99 90 65              BCC MonD_Err        ; -> error: device <  4
ba9b e0 1f              CPX #31
ba9d b0 61              BCS MonD_Err        ; -> error: device > 31
ba9f 86 60              STX M_Aval
baa1 a9 00              LDA #0
baa3 85 62              STA M_Aval+2
baa5 85 b7              STA FNLEN
baa7 aa                 TAX
baa8 20 68 ff           JSR K_SETBNK        ; bank 0
baab 20 e9 b8           JSR Mon_Get_Char
baae c6 7a              DEC DS_LEN
bab0 c9 24              CMP #'$'            ; loading directory ?
bab2 f0 4f              BEQ Mon_Dir         ; -> yes
bab4 a9 00              LDA #0              ; LA
bab6 a6 60              LDX M_Aval        ; FA
bab8 a0 0f              LDY #15             ; SA
baba 20 ba ff           JSR K_SETLFS
babd 20 c0 ff           JSR K_OPEN          ; OPEN 0,FA,15
bac0 b0 32              BCS MonD_50         ; -> error
bac2 a2 00              LDX #0
bac4 20 c9 ff           JSR K_CKOUT         ; select output channel
bac7 b0 2b              BCS MonD_50         ; -> error
bac9 a6 7a    MonD_20   LDX DS_LEN          ; buffer pointer
bacb e6 7a              INC DS_LEN
bacd bd 00 02           LDA BUF,X           ; load command character
bad0 f0 05              BEQ MonD_30         ; -> finish
bad2 20 d2 ff           JSR K_BSOUT         ; send to device
bad5 90 f2              BCC MonD_20         ; -> loop
bad7 20 cc ff MonD_30   JSR K_CLRCH         ; command has been sent
bada 20 b4 b8           JSR Mon_CR
badd a2 00              LDX #0
badf 20 c6 ff           JSR K_CHKIN         ; select input channel
bae2 b0 10              BCS MonD_50         ; -> error
bae4 20 cf ff MonD_40   JSR K_BASIN
bae7 20 d2 ff           JSR K_BSOUT         ; get char and print
baea c9 0d              CMP #CR             ; until CR
baec f0 06              BEQ MonD_50
baee a5 90              LDA STATUS
baf0 29 bf              AND #%1011 1111     ; check EOI flag
baf2 f0 f0              BEQ MonD_40         ; loop

baf4 20 cc ff MonD_50   JSR K_CLRCH         ; clear channel
baf7 a9 00              LDA #0
baf9 38                 SEC
bafa 20 c3 ff           JSR K_CLOSE         ; close command channel
bafd 4c 8b b0           JMP Mon_Main
bb00 4c bc b0 MonD_Err  JMP Mon_Error

              ; ***************
bb03            Mon_Dir ; $bb03
              ; ***************

bb03 a0 ff              LDY #$ff
bb05 a6 7a              LDX DS_LEN          ; buffer pointer
bb07 ca                 DEX
bb08 c8       MDir_10   INY                 ; count length of pattern
bb09 e8                 INX
bb0a bd 00 02           LDA BUF,X           ; pattern character
bb0d d0 f9              BNE MDir_10         ; loop if not at end
bb0f 98                 TYA                 ; A = length
bb10 a6 7a              LDX DS_LEN          ; start of pattern low
bb12 a0 02              LDY #>BUF           ; start of pattern high
bb14 20 bd ff           JSR K_SETNAM
bb17 a9 00              LDA #0
bb19 a6 60              LDX M_Aval
bb1b a0 60              LDY #$60
bb1d 20 ba ff           JSR K_SETLFS        ; OPEN 0,FA,$60 (LOAD)
bb20 20 c0 ff           JSR K_OPEN
bb23 b0 cf              BCS MonD_50         ; -> error
bb25 a2 00              LDX #0
bb27 20 c6 ff           JSR K_CHKIN
bb2a 20 b4 b8           JSR Mon_CR
bb2d a0 03              LDY #3              ; load adr, link, blocks
bb2f 84 63    MDir_20   STY M_Bval
bb31 20 cf ff MDir_30   JSR K_BASIN
bb34 85 60              STA M_Aval        ; low byte
bb36 a5 90              LDA STATUS
bb38 d0 ba              BNE MonD_50         ; -> finish
bb3a 20 cf ff           JSR K_BASIN
bb3d 85 61              STA M_Aval+1      ; high byte
bb3f a5 90              LDA STATUS
bb41 d0 b1              BNE MonD_50         ; -> finish
bb43 c6 63              DEC M_Bval
bb45 d0 ea              BNE MDir_30         ; loop read word
bb47 20 07 ba           JSR Mon_Bin_BCD
bb4a a9 00              LDA #0
bb4c a2 08              LDX #8
bb4e a0 03              LDY #3
bb50 20 5d ba           JSR Mon_Print_Number ; blocks
bb53 a9 20              LDA #' '
bb55 20 d2 ff           JSR K_BSOUT
bb58 20 cf ff MDir_40   JSR K_BASIN         ; print header / dir entry / free blcoks
bb5b f0 09              BEQ MDir_50
bb5d a6 90              LDX STATUS
bb5f d0 93              BNE MonD_50
bb61 20 d2 ff           JSR K_BSOUT
bb64 90 f2              BCC MDir_40
bb66 20 b4 b8 MDir_50   JSR Mon_CR
bb69 20 e1 ff           JSR K_STOP
bb6c f0 86              BEQ MonD_50
bb6e a0 02              LDY #2              ; link, blocks
bb70 d0 bd              BNE MDir_20

bb72 ff ff ff           .FILL $bfc0-* ($ff) ; 1102 bytes ; 1102 bytes

bfc0 28 43 29           .BYTE "(C)1986 COMMODORE ELECTRONICS"
bfdd 2c 20 4c           .BYTE ", LTD. ALL RIGHTS RESERVED."
bff8 ff ff ff           .BYTE $ff,$ff,$ff,$ff,$c8,$cd
bffe 01 c5              .WORD $c501 ; 15103



  950 Symbols
-------------
D8502                          $0000    27
R8502                          $0001    28
COLINK                         $0002  1508
IEC_IFR_BIT                    $0002  1532
C_ULINE                        $0002     7
BANK                           $0002    32D  1705   1728   1750   1757
                                      3281
PC_HI                          $0003    36D  1708   1726   1754   3280
PC_LO                          $0004    37D  1725   3279
RS232_C_BIT                    $0004  1535
S_REG                          $0005    38D  1722   1935
A_REG                          $0006    39D  1719
X_REG                          $0007    40D  1720
IEC_ATN_BIT                    $0008  1531
Y_REG                          $0008    41D  1721
CHARAC                         $0009    42D  1738   1969
LF                             $000a     8
ENDCHR                         $000a    51
TRMPOS                         $000b    52
B_VERCK                        $000c    53
B_COUNT                        $000d    65
CR                             $000d     9D  1775   2482   3091   3098
                                      3106   3491
Default_Color                  $000e  1511
DIMFLG                         $000e    72
VALTYP                         $000f    78
BLINK                          $000f    10
INTFLG                         $0010    84
IEC_CLK_BIT                    $0010  1533
GARBFL                         $0011    99
DOWN                           $0011    11
SUBFLG                         $0012   105
REVERSE                        $0012    12
HOME                           $0013    13
INPFLG                         $0013   109
TANSGN                         $0014   119
DEL                            $0014    14
CHANNL                         $0015   126
LINNUM                         $0016   134
TEMPPT                         $0018   139
LASTPT                         $0019   144
ROWS                           $0019  1507
TEMPST                         $001b   151
ESC                            $001b    15D  1960   2418   2482   3106
RIGHT                          $001d    16
IEC_DAT_BIT                    $0020  1534
QUOTE                          $0022    17D  2174   2180
INDEXA                         $0024   157
INDEXB                         $0026   163
APOSTR                         $0027    18D  2111
FAC3_M1                        $0028   167
COLS                           $0028  1506
FAC3_M2                        $0029   168
FAC3_M3                        $002a   169
FAC3_M4                        $002b   170
TXTTAB                         $002d   176
VARTAB                         $002f   180
ARYTAB                         $0031   184
STREND                         $0033   188
FRETOP                         $0035   192
FRESPC                         $0037   196
MEMSIZ                         $0039   200
CURLIN                         $003b   206
TXTPTR                         $003d   212
FNDPNT                         $003f   217
DATLIN                         $0041   222
DATPTR                         $0043   227
INPPTR                         $0045   233
VARNAM                         $0047   243
VARPNT                         $0049   249
FORPNT                         $004b   255
VARTXT                         $004d   260
OP_TMP                         $004f   264
GRBPNT                         $0050   270
COLMAX                         $0050  1509
DSCPNT                         $0052   274
HELPER                         $0055   281
JUMPER                         $0056   288
OLDOV                          $0058   293
FACTPA                         $0059   301
ARYPNT                         $005a   306
HIGHTR                         $005c   313
DESCA                          $005d   315
FACTPB                         $005e   323D  2410
TMPVAR                         $005f   324
TENEXP                         $0060   325
M_Aval                         $0060   328D  1900   1908   1909   1910
                                      1934   1950   2047   2049   2052
                                      2053   2055   2056   2058   2059
                                      2073   2076   2081   2090   2092
                                      2126   2194   2203   2204   2252
                                      2310   2318   2388   2391   2476
                                      2950   2951   2952   2995   3001
                                      3002   3003   3015   3016   3018
                                      3019   3021   3022   3027   3028
                                      3030   3031   3033   3034   3173
                                      3175   3177   3186   3188   3189
                                      3191   3192   3194   3209   3211
                                      3212   3214   3215   3217   3276
                                      3277   3278   3299   3301   3303
                                      3306   3308   3310   3326   3331
                                      3332   3404   3406   3408   3454
                                      3459   3461   3470   3520   3531
                                      3535
LOWTR                          $0061   326
M_Bval                         $0063   329D  2051   2054   2057   2337
                                      2346   2379   2385   2634   2636
                                      2639   2640   3225   3227   3228
                                      3230   3231   3233   3307   3309
                                      3311   3529   3538
FAC1_EX                        $0063   334
FAC1_M1                        $0064   335
FAC1_M2                        $0065   336
FAC1_M3                        $0066   337
M_Cval                         $0066   330D  1853   1854   1866   1868
                                      1880   1882   2046   2048   2062
                                      2210   2234   2235   2246   2389
                                      2392   2428   2431   2435   2558
                                      2562   3057   3061   3062   3174
                                      3176   3178   3187   3190   3193
                                      3247   3248   3250   3252   3260
                                      3262   3263   3265   3266   3268
                                      3376   3377   3378
FAC1_M4                        $0067   338
FAC1_SI                        $0068   339
DEGREE                         $0069   341
FAC2_EX                        $006a   345
FAC2_M1                        $006b   346
FAC2_M2                        $006c   347
FAC2_M3                        $006d   348
FAC2_M4                        $006e   349
FAC2_SI                        $006f   350
STRPTR                         $0070   354
FROUND                         $0071   359
STRNG2                         $0072   363
AUTINC                         $0074   364
MVDFLG                         $0076   365
TEMP_A                         $0077   366
KEYSIZ                         $0078   367
SYNTMP                         $0079   368
DS_LEN                         $007a   369D  1769   2176   2189   2326
                                      2916   2926   2971   3148   3155
                                      3162   3466   3478   3479   3509
                                      3516
DS_ADR                         $007b   370
TOS                            $007d   372
STND_COL                       $007f  1498
RUNMOD                         $007f   373
CTRL_COL                       $007f  1495
DOSFLA                         $0080   386
DOSFLB                         $0081   394
OLDSTK                         $0082   396
COLSEL                         $0083   400
MULCO1                         $0084   401
MULCO2                         $0085   402
FG_COL                         $0086   403
SCALE_X                        $0087   404
SCALE_Y                        $0089   405
STOPNB                         $008b   406
GRAPNT                         $008c   408
VTEMPA                         $008e   409
STATUS                         $0090   423D  2165   2223   3493   3532
                                      3536   3549
STKEY                          $0091   425
UP                             $0091    19D  3091
SVXT                           $0092   426
K_VERCK                        $0093   427D  1819   2034   2043   2078
                                      2134   2141   2205   2216   2226
C3PO                           $0094   429
BSOUR                          $0095   430
SYNO                           $0096   432
XSAV                           $0097   433
LDTND                          $0098   440
DFLTN                          $0099   444
DFLTO                          $009a   454
PRTY                           $009b   457
DPSW                           $009c   458
MSGFLG                         $009d   460
PTR_LO                         $009e   461
PTR_HI                         $009f   462D  2342   2380   2455   2463
JIFFY_CLOCK                    $00a0   472
R2D2                           $00a3   474
BSOUR1                         $00a4   475
CNTDN                          $00a5   476
BUFPT                          $00a6   477
RSI_In_Bit                     $00a7   479
RSI_Count                      $00a8   480
RSI_Start                      $00a9   481
RSI_Data                       $00aa   482
RSI_Parity                     $00ab   483
SAL                            $00ac   485
SAH                            $00ad   486
EAL                            $00ae   487
EAH                            $00af   488
CMP0                           $00b0   491
CMP1                           $00b1   492
TAPE1                          $00b2   497
RS_Count                       $00b4   498
RS_Next                        $00b5   499
RS_Out                         $00b6   500
FNLEN                          $00b7   504D  2163   2183   3462
LA                             $00b8   505
SA                             $00b9   506D  2160   2209   2237
FA                             $00ba   507D  2159   2195
FNADR                          $00bb   508D  2167   2169   2182
RS_Parity                      $00bd   510
FSBLK                          $00be   511
DRIVE                          $00bf   512
CAS1                           $00c0   513
STAL                           $00c1   515
STAH                           $00c2   516
MEMUSS                         $00c3   517
DATA                           $00c5   519
BA                             $00c6   520D  2162   2199
FNBANK                         $00c7   521D  2164
RIBUF                          $00c8   523
ROBUF                          $00ca   524
KEYTAB                         $00cc   526
IMPARM                         $00ce   528
NDX                            $00d0   530D  2440
KYNDX                          $00d1   531
KEYIDX                         $00d2   532
SHFLAG                         $00d3   533
SFDX                           $00d4   534
LSTX                           $00d5   535
CRSW                           $00d6   536
MODE_80                        $00d7   537D  1905   1917   1953   1997
                                      2014
COLRAM_PAGE                    $00d8  1510
GRAPHM                         $00d8   539
CHAREN                         $00d9   540
E_Beg                          $00da   541
E_End                          $00dc   542
E_Col                          $00de   543
E_Row                          $00df   544
PNT                            $00e0   546
USER                           $00e2   547
Margin_Bottom                  $00e4   551
Margin_Top                     $00e5   552
Margin_Left                    $00e6   553
Margin_Right                   $00e7   554
CurLst_Row                     $00e8   556
CurLst_Col                     $00e9   557
Cursor_End                     $00ea   558
Cursor_Row                     $00eb   560
Cursor_Col                     $00ec   561
LINES                          $00ed   563
COLUMNS                        $00ee   564
DATAX                          $00ef   565
LSTCHR                         $00f0   566
E_Attribute                    $00f1   567
TCOLOR                         $00f2   568
E_Reverse                      $00f3   569
QTSW                           $00f4   570
INSRT                          $00f5   571
INSFLG                         $00f6   572
LOCKS                          $00f7   573
Scroll_Locked                  $00f8   574
BEEPER                         $00f9   575
CTRL_ROW                       $00fb  1496
PICHAR                         $00ff    20
STACK                          $0100   577D  2124
DOS_COUNT                      $0110   589
DOS_FNLEN_1                    $0111   590
DOS_DRIVE_1                    $0112   591
DOS_FNLEN_2                    $0113   592
DOS_DRIVE_2                    $0114   593
DOS_FNADR_2                    $0115   594
DOS_BEG                        $0117   595
DOS_END                        $0119   596
DOS_LA                         $011b   597
DOS_FA                         $011c   598
DOS_SA                         $011d   599
DOS_RL                         $011e   600
DOS_BANK                       $011f   601
DOS_ID                         $0120   602
DOS_UNIT                       $0122   603
BNR                            $0123   609
ENR                            $0124   610
DOLR                           $0125   611
FLAG                           $0126   612
SWE                            $0127   613
USGN                           $0128   614
UEXP                           $0129   615
VN                             $012a   616
CHSN                           $012b   617
VF                             $012c   618
NF                             $012d   619
POSP                           $012e   620
FESP                           $012f   621
ETOF                           $0130   622
CFORM                          $0131   623
SNO                            $0132   624
BLFD                           $0133   625
BEGFD                          $0134   626
LFOR                           $0135   627
ENDFD                          $0136   628
BUF                            $0200   640D  1771   1778   2177   3156
                                      3480   3513   3517
FETCH                          $02a2   648
STASH                          $02af   658D  1867   2074
CMPARE                         $02be   670D  1881   2075
JSRFAR                         $02cd   682
JMPFAR                         $02e3   698
USRVEC                         $02fc   719
IERROR                         $0300   724
IMAIN                          $0302   725
ICRNCH                         $0304   726
IQPLOP                         $0306   727
IGONE                          $0308   728
IEVAL                          $030a   729
IESCLK                         $030c   730
IESCPR                         $030e   731
IESCEX                         $0310   732
IIRQ                           $0314   738
IBRK                           $0316   739
INMI                           $0318   740
IOPEN                          $031a   741
ICLOSE                         $031c   742
ICHKIN                         $031e   743
ICKOUT                         $0320   744
ICLRCH                         $0322   745
IBASIN                         $0324   746
IBSOUT                         $0326   747
ISTOP                          $0328   748
IGETIN                         $032a   749
ICLALL                         $032c   750
EXMON                          $032e   751D  1783
ILOAD                          $0330   752
ISAVE                          $0332   753
CTLVEC                         $0334   759
SHFVEC                         $0336   760
ESCVEC                         $0338   761
KEYVEC                         $033a   762
KEYCHK                         $033c   763
DECODE                         $033e   765
KEYD                           $034a   767D  2424   2426   2427   2430
                                      2433   2434   2437   2438
TABMAP                         $0354   768
BITABL                         $035e   769
LAT                            $0362   774
FAT                            $036c   775
SAT                            $0376   776
CHRGET                         $0380   791
CHRGOT                         $0386   797
ISNUM                          $0390   804
Fetch_0                        $039f   818
Fetch_1                        $03ab   832
Get_INDEXA_1                   $03b7   845
Get_INDEXB_0                   $03c0   853
INDTXT                         $03c9   861
NULL_DESC                      $03d2   874
USER_BANK                      $03d5   880
TMPDES                         $03d6   882
STR_BANK                       $03da   883
SAVSIZ                         $03db   884
BITS                           $03df   885
SPRTMP                         $03e0   886
FG_BG                          $03e2   888
FG_MC1                         $03e3   889
RAM_DMA                        $03f0   894
VAR_START                      $0400   906
VIC_TEXT                       $0400   905
BASIC_STACK                    $0800   908
RESET_VECTOR                   $0a00   910D  1827
DEJAVU                         $0a02   911
PALNTS                         $0a03   912
INIT_STATUS                    $0a04   913
MEM_BOT                        $0a05   914
MEM_TOP                        $0a07   915
IRQTMP                         $0a09   916
CASTON                         $0a0b   920
KIKA26                         $0a0c   921
STUPID                         $0a0d   922
TIMOUT                         $0a0e   923
RS_Enable                      $0a0f   927
RS_Control                     $0a10   928
RS_Command                     $0a11   929
RS_Baudrate                    $0a12   930
RS_Status                      $0a14   931
RS_Bits                        $0a15   940
RS_Timer_Lo                    $0a16   941
RS_Timer_Hi                    $0a17   942
RS_IBP_End                     $0a18   943
RS_IBP_Beg                     $0a19   944
RS_OBP_Beg                     $0a1a   945
RS_OBP_End                     $0a1b   946
Fast_IEC                       $0a1c   948
JIFFY_COUNTDOWN                $0a1d   960
XMAX                           $0a20   961
PAUSE                          $0a21   962
RPTFLG                         $0a22   963
KOUNT                          $0a23   964
DELAY                          $0a24   965
LSTHF                          $0a25   966
BLNON                          $0a26   968
BLNSW                          $0a27   969
BLNCT                          $0a28   970
GDBLN                          $0a29   971
GDCOL                          $0a2a   972
CURMOD                         $0a2b   981
VSH_TEXT                       $0a2c   982
VSH_BITMAP                     $0a2d   983
VDC_RAM_PAGE                   $0a2e   984
VDC_ATT_PAGE                   $0a2f   985
LINTMP                         $0a30   986
VDC_ROW                        $0a31   987
VDC_COL                        $0a32   988
VDC_ATT                        $0a33   989
VSH_SPLIT                      $0a34   990
FN_SAVE_X                      $0a35   991
PAL_ADJ                        $0a36   992
VSH_SPEED                      $0a37   993
VSH_SPR_ENA                    $0a38   994
VSH_Ctrl_1                     $0a39   995
SPRITES                        $0a3a   996
VIC_RAM_PAGE                   $0a3b   997
VDC_UPDATE_LO                  $0a3c   998
VDC_UPDATE_HI                  $0a3d   999
ZP_SW_COL                      $0a40  1004
SWPMAP                         $0a60  1009
M_Data                         $0a80  1013D  2116   2127   2138   2166
                                      2168
M_Operand                      $0aa0  1014D  2273   2293   2294   2308
                                      2322   2331   2456   3368   3371
                                      3382   3383   3384   3389   3390
                                      3391   3405   3407   3409   3411
                                      3427   3428   3429   3430
M_Format                       $0aaa  1015D  2345   2359   2366   2533
                                      2542   2606
M_Op_Size                      $0aab  1016D  2357   2383   2407   2420
                                      2421   2486   2487   2489   2513
                                      2531   2608
M_Mne                          $0aac  1017D  2282   2288
M_Save_XR                      $0aaf  1018D  2454   2464   3113   3117
                                      3154   3163   3207   3210
M_Opcode                       $0ab1  1019D  2339   2343   2414   2460
M_Save_X                       $0ab2  1020D  1852   1858   1865   1872
                                      1879   1887
M_Dir                          $0ab3  1021D  2036   2066   2088
M_Count                        $0ab4  1022D  2274   2302   2316   2927
                                      2942   2953   2990   3047   3423
                                      3438   3440
M_Number                       $0ab5  1023D  2986   2987   3026
M_Shift                        $0ab6  1024D  2313   2974   3000   3042
                                      3424   3425
M_Temp                         $0ab7  1025D  2061   2247   2996   3010
                                      3011   3012   3014   3017   3020
                                      3300   3302   3304
Module_Bank                    $0ac0  1027
Module_Flags                   $0ac1  1028
DINFLAG                        $0ac5  1029
T_Buffer                       $0b00  1035
R_Rece_Buffer                  $0c00  1036
R_Send_Buffer                  $0d00  1037
PKYBUF                         $1000  1038
PKYDEF                         $100a  1039
DOSSTR                         $1100  1040
XPOS                           $1131  1044
YPOS                           $1133  1045
XDEST                          $1135  1046
YDEST                          $1137  1047
XABS                           $1139  1048
YABS                           $113b  1049
XSGN                           $113d  1050
YSGN                           $113f  1051
FCT                            $1141  1052
ERRVAL                         $1145  1053
LESSER                         $1147  1054
GREATR                         $1148  1055
ANGSGN                         $1149  1056
SINVAL                         $114a  1057
COSVAL                         $114c  1058
ANGCNT                         $114e  1059
XCIRCL                         $1150  1060
YCIRCL                         $1152  1061
XRADIUS                        $1154  1062
YRADIUS                        $1156  1063
ROTANG                         $1158  1064
YDIST2                         $115a  1065
ANGBEG                         $115c  1066
ANGEND                         $115e  1067
XRCOS                          $1160  1068
YRSIN                          $1162  1069
XRSIN                          $1164  1070
YRCOS                          $1166  1071
CHRPAG                         $1168  1072
BITCNT                         $1169  1073
SCALEM                         $116a  1074
WIDTH                          $116b  1075
FILFLG                         $116c  1076
BITMSK                         $116d  1077
NUMCNT                         $116e  1078
TRCFLG                         $116f  1079
Ren_Line_Lo                    $1170  1083
Ren_Line_Hi                    $1171  1084
Ren_Step_Lo                    $1172  1085
Ren_Step_Hi                    $1173  1086
T3                             $1174  1088
T4                             $1175  1089
T5                             $1176  1090
VTEMP3                         $1177  1092
VTEMP4                         $1178  1093
Rel_Abs_Flag                   $1179  1094
ADRAY1                         $117a  1095
ADRAY2                         $117c  1096
SPRITE_DATA                    $117e  1098
VSH                            $11d6  1104D  1105   1106   1107
VSH_SS_COLL                    $11e7  1105
VSH_LPX                        $11e9  1106
VSH_LPY                        $11ea  1107
CHARGEN_TEXT                   $11eb  1109
CHARGEN_GRAF                   $11ec  1110
REC_SA                         $11ed  1112
OLDLIN                         $1200  1113
OLDTXT                         $1202  1114
PU_FILL                        $1204  1116
PU_COMMA                       $1205  1117
PU_DOT                         $1206  1118
PU_MONEY                       $1207  1119
ERRNUM                         $1208  1121
ERRLIN                         $1209  1122
TRAPNO                         $120b  1123
TMPTRP                         $120d  1124
ERRTXT                         $120e  1125
TEXT_TOP                       $1210  1127
TEXT_MAX                       $1212  1128
TEXT_TMP                       $1214  1129
TEXT_LIN                       $1216  1130
FUNC_USR                       $1218  1131
RNDX                           $121b  1133
ARC_SEG                        $1220  1135
Snd_Tempo                      $1222  1139
Snd_Duration                   $1223  1140
Snd_Dur_Tmp                    $1229  1141
Snd_Octave                     $122b  1142
Snd_Sharp                      $122c  1143
Snd_Pitch                      $122d  1144
VOICE                          $122f  1146
WAVE0                          $1230  1147
DNOTE                          $1233  1148
FLTSAV                         $1234  1149
FLTFLG                         $1238  1150
NIBBLE                         $1239  1152
TONNUM                         $123a  1153
TONVAL                         $123b  1154
PARCNT                         $123e  1156
ATKTAB                         $123f  1157
SUSTAB                         $1249  1158
WAVTAB                         $1253  1159
PULSLO                         $125d  1160
PULSHI                         $1267  1161
FILTERS                        $1271  1162
Old_Filter                     $1274  1163
Old_Volume                     $1275  1164
INT_TRIP_FLAG                  $1276  1165
Light_Pen_Flag                 $1278  1166
INT_ADR_LO                     $1279  1167
INT_ADR_HI                     $127c  1168
INT_VAL                        $127f  1169
Collision_Type                 $1280  1170
Voice_Number                   $1281  1171
Sound_Duration_1_Lo            $1282  1172
Sound_Duration_2_Lo            $1283  1173
Sound_Duration_3_Lo            $1284  1174
Sound_Duration_1_Hi            $1285  1175
Sound_Duration_2_Hi            $1286  1176
Sound_Duration_3_Hi            $1287  1177
SOUND_MAX_LO                   $1288  1178
SOUND_MAX_HI                   $128b  1179
SOUND_MIN_LO                   $128e  1180
SOUND_MIN_HI                   $1291  1181
SOUND_DIR                      $1294  1182
SOUND_STEP_LO                  $1297  1183
SOUND_STEP_HI                  $129a  1184
SOUND_FREQ_LO                  $129d  1185
SOUND_FREQ_HI                  $12a0  1186
TEMP_TIME_LO                   $12a3  1187
TEMP_TIME_HI                   $12a4  1188
TEMP_MAX_LO                    $12a5  1189
TEMP_MAX_HI                    $12a6  1190
TEMP_MIN_LO                    $12a7  1191
TEMP_MIN_HI                    $12a8  1192
TEMP_DIRECTION                 $12a9  1193
TEMP_STEP_LO                   $12aa  1194
TEMP_STEP_HI                   $12ab  1195
TEMP_FREQ_LO                   $12ac  1196
TEMP_FREQ_HI                   $12ad  1197
TEMP_PULSE_LO                  $12ae  1198
TEMP_PULSE_HI                  $12af  1199
TEMP_WAVEFORM                  $12b0  1200
POT_IEMP_1                     $12b1  1202
POT_IEMP_2                     $12b2  1203
Win_XL                         $12b3  1205
Win_YL                         $12b4  1206
Win_XH                         $12b5  1207
Win_YH                         $12b6  1208
SAVRAM                         $12b7  1210
DEFMOD                         $12fa  1212
LINCNT                         $12fb  1213
SPRNUM                         $12fc  1214
IRQ_ACTIVE_FLAG                $12fd  1215
COLOR_RAM                      $1c00  1219
RAMBOT                         $1c00  1216
PROGRAM_START                  $1c01  1217
GRAFX_RAM                      $2000  1220
V3e00                          $3e00  1222
BASIC_MONITOR                  $b000  1681D  1723   1724
Mon_Break                      $b003  1687
Mon_Command                    $b006  1693
Mon_Entry_By_Break             $b009  1699D  1690
MEBB_10                        $b019  1707D  1710
Mon_Entry_By_Call              $b021  1714D  1684
Mon_Start                      $b046  1733D  1711
Mon_Print_Header               $b050  1744D  1840
MPH_10                         $b080  1757D  1761
Mon_Main                       $b08b  1764D  1780   1801   1923   1939
                                      1962   1979   2101   2151   2212
                                      2230   2259   2279   2441   2492
                                      3356   3501
MoMa_10                        $b092  1770D  1776
MoMa_20                        $b0a6  1779D  1782
Mon_Command_Switch             $b0b2  1786D  1696
MoCS_10                        $b0b4  1790D  1793
Mon_Error                      $b0bc  1796D  1774   1924   2041   2094
                                      2152   2188   2260   2299   2442
                                      2493   2937   3502
MoMa_30                        $b0c5  1804D  1791
MoMa_40                        $b0db  1819D  1808
MoMa_50                        $b0e0  1821D  1810
Mon_Exit                       $b0e3  1824D  1842
cmdchr                         $b0e6  1829D  1790
cmdnum                         $b0f5  1830D  2966
cmdtbl                         $b0fc  1832D  1814   1816
Mon_Fetch                      $b11a  1849D  1993   2005   2072   2137
                                      2510   2520   2536
Mon_Stash                      $b12a  1862D  1951   2253   2411   2415
Mon_Compa                      $b13d  1876
Mon_Memory                     $b152  1892D  1839
MoMe_10                        $b15c  1899D  1895
MoMe_20                        $b162  1902D  1898
MoMe_30                        $b16e  1908D  1906   1912
MoMe_40                        $b177  1913D  1901   1922
MoMe_50                        $b186  1920D  1918
MoMe_60                        $b18e  1923D  1914
MoMe_Err                       $b191  1924D  1903
Mon_Set_Register               $b194  1927D  1846
MoSr_10                        $b199  1932D  1938
MoSr_20                        $b1a8  1939D  1933
Mon_Set_Memory                 $b1ab  1942D  1845
MoSM_10                        $b1b2  1948D  1956   1958
MoSM_20                        $b1c5  1957D  1954
MoSM_30                        $b1c9  1959D  1945   1949
Mon_Go                         $b1d6  1965D  1836
Mon_Gosub                      $b1df  1974D  1838
Mon_Dump_Row                   $b1e8  1982D  1915   1961
MoDR_10                        $b1f7  1992D  2000
MoDR_20                        $b1fa  1993D  1990
MoDR_30                        $b209  2000D  1998
MoDR_40                        $b213  2005D  2017   2019
MoDR_50                        $b220  2012D  2010
MoDR_60                        $b22c  2018D  2015
Mon_Compare                    $b231  2023D  1833
Mon_Transfer                   $b234  2030D  1841
MoTr_10                        $b247  2041D  2038
MoTr_15                        $b24a  2043D  2040
MoTr_20                        $b26d  2061D  2064
MoTr_25                        $b27a  2068D  2044   2050
MoTr_30                        $b27f  2070D  2100
MoTr_35                        $b28f  2076
MoTr_40                        $b299  2081D  2079
MoTr_45                        $b2aa  2088D  2084
MoTr_50                        $b2ba  2095D  2089
MoTr_55                        $b2c3  2098D  2091   2093
MoTr_60                        $b2c6  2099D  2097
MoTr_65                        $b2cb  2101D  2071
Mon_Hunt                       $b2ce  2104D  1837
MoHu_10                        $b2e3  2116D  2121
MoHu_20                        $b2f2  2124D  2112
MoHu_30                        $b2f8  2126D  2132
MoHu_40                        $b307  2134D  2119   2122   2130
MoHu_50                        $b30c  2136D  2150
MoHu_60                        $b30e  2137D  2142
MoHu_70                        $b324  2146D  2139
MoHu_80                        $b331  2151D  2147
MoHu_Err                       $b334  2152D  2108   2115
Mon_Load_Save                  $b337  2155D  1820
MLS_10                         $b34e  2170D  2173
MLS_20                         $b35d  2177D  2186
MLS_30                         $b370  2188D  2175   2207   2220   2227
MLS_40                         $b373  2189D  2181
MLS_50                         $b3a8  2212D  2225
MLS_60                         $b3ab  2216D  2171   2178   2191   2193
                                      2197   2238
MLS_70                         $b3b7  2222D  2218
MLS_80                         $b3d1  2234D  2201
Mon_Fill                       $b3db  2241D  1835
MoFi_10                        $b3ee  2252D  2258
MoFi_20                        $b400  2259D  2255
MoFi_Err                       $b403  2260D  2245   2248   2250
Mon_Assemble                   $b406  2263D  1832   1844
MoAs_10                        $b40b  2272D  2281
MoAs_12                        $b413  2275D  2285
MoAs_14                        $b41f  2280D  2276   2278
MoAs_16                        $b42b  2286D  2297
MoAs_18                        $b436  2292D  2296
MoAs_20                        $b442  2299D  2270   2306   2311   2335
MoAs_22                        $b445  2301D  2287
MoAs_24                        $b447  2302D  2330   2334
MoAs_26                        $b46b  2318D  2315
MoAs_28                        $b471  2321D  2317   2319
MoAs_30                        $b473  2322D  2325
MoAs_32                        $b47a  2326D  2305
MoAs_34                        $b47c  2327D  2303
MoAs_36                        $b48f  2337D  2328
MoAs_38                        $b496  2341D  2462
MoAs_40                        $b4b4  2355D  2374
MoAs_42                        $b4bd  2359D  2365
MoAs_44                        $b4cc  2366D  2356   2358
MoAs_46                        $b4df  2373D  2367   2371
MoAs_48                        $b4e4  2377D  2362
MoAs_50                        $b4ea  2379D  2375
MoAs_52                        $b4f3  2383D  2381
MoAs_54                        $b511  2399D  2393
MoAs_56                        $b519  2404D  2397
MoAs_58                        $b521  2410D  2387   2413
MoAs_60                        $b524  2411D  2408
MoAs_62                        $b52a  2414D  2384
MoAs_Err                       $b579  2442D  2394   2396   2401   2403
                                      2461
Mon_Match_Double               $b57c  2445D  2363   2377   2378
Mon_Match_Operand              $b57f  2451D  2349   2351   2369   2372
                                      2448
MaOp_10                        $b58b  2460D  2382
MaOp_20                        $b593  2463D  2457
Mon_Disassemble                $b599  2468D  1834
MoDi_10                        $b5a3  2475D  2471
MoDi_12                        $b5a9  2479D  2474
MoDi_14                        $b5ae  2481D  2477   2491
MoDi_End                       $b5ce  2492D  2484
MoDi_Err                       $b5d1  2493D  2480
Mon_Dis_Code                   $b5d4  2496D  2485
Mon_Print_Code                 $b5dc  2504D  2419
MoPC_10                        $b5ef  2515D  2524
MoPC_15                        $b5fc  2520D  2516
MoPC_20                        $b602  2522D  2519
MoPC_25                        $b60f  2529D  2550
MoPC_30                        $b618  2533D  2541
MoPC_35                        $b62a  2542D  2530   2532
MoPC_40                        $b63d  2549D  2543   2547
MoPC_50                        $b641  2552D  2538
MoPC_55                        $b64a  2557D  2555
MoPC_60                        $b64d  2558D  2552
MoPC_65                        $b653  2562D  2560
MoPC_Ret                       $b658  2565D  2563
Mon_Analyze_Opcode             $b659  2568D  2344   2511
AnOp_10                        $b668  2592D  2585
AnOp_20                        $b673  2600D  2595
AnOp_30                        $b677  2602D  2587   2589
AnOp_40                        $b67b  2604D  2601
AnOp_50                        $b692  2616D  2625
AnOp_60                        $b696  2619D  2622
AnOp_70                        $b69d  2624D  2615   2617
Mon_Mnemonic                   $b6a1  2629D  2527
MoMn_10                        $b6ac  2637D  2647
MoMn_20                        $b6b0  2639D  2643
Mon_Mode                       $b6c3  2651D  2594
Mon_Address                    $b707  2740D  2605
Mon_Char1                      $b715  2769D  2368   2544
Mon_Char2                      $b71b  2770D  2370   2546
Mon_Mne_Left                   $b721  2773D  2350   2633
Mon_Mne_Right                  $b761  2842D  2348   2635
Mon_Get_Aval                   $b7a5  2913D  2125   3322
Mon_Got_Aval                   $b7a7  2919D  1818   1897   1932   1948
                                      2039   2129   2192   2196   2200
                                      2249   2473   3297
MoGA_10                        $b7ba  2931D  2925
MoGA_20                        $b7c2  2935D  2923
MoGA_30                        $b7c7  2939D  2929
MoGA_40                        $b7c9  2941D  2928   2932   2934
Mon_Eval                       $b7ce  2946D  2304   2922
MoEv_10                        $b7dd  2958D  2963
MoEv_15                        $b7e5  2962D  2959
MoEv_20                        $b7eb  2966D  2969
MoEv_25                        $b7f6  2972D  2967
MoEv_30                        $b7ff  2975D  3038
MoEv_35                        $b813  2986D  2981
MoEv_40                        $b826  2995D  2998
MoEv_45                        $b82e  3000D  2992
MoEv_50                        $b831  3001D  3006
MoEv_55                        $b862  3025D  3009
MoEv_60                        $b87c  3039D  2988   2989   3004   3013
                                      3023   3035   3037
MoEv_65                        $b87e  3041D  2960   2976   2979   2984
Mon_Base                       $b88a  3050D  2972
Mon_Shift                      $b88e  3051D  2973
Mon_Hex_Cval                   $b892  3054D  1988   2085   2143   2507
Mon_Hex_Word                   $b89f  3065D  2557   3333
Mon_Hex_Blank                  $b8a5  3074D  1758   2521
Mon_Blank                      $b8a8  3080D  1992   2086   2087   2144
                                      2145   2501   2508   2648
Mon_BOL                        $b8ad  3087D  2416
Mon_CR                         $b8b4  3095D  1767   1985   2068   2135
                                      2202   3485   3527   3553
Mon_Blank_Line                 $b8b9  3102D  3323   3334   3342   3349
Mon_Hex                        $b8c2  3110D  1755   1994   2539   3070
                                      3077
Mon_Bin_To_Hex                 $b8d2  3121D  1751   2429   2432   2436
                                      3058   3114   3328
Mon_Nib_Hex                    $b8dc  3134D  3125
MoNH_10                        $b8e4  3141D  3139
Mon_Got_Char                   $b8e7  3145D  2924
Mon_Get_Char                   $b8e9  3151D  1779   2110   2113   2118
                                      2170   2190   2275   2327   2958
                                      2975   3465
MGNC_10                        $b8f9  3161D  3157   3159
Mon_Aval_To_Cval               $b901  3168D  1896   1946   2198   2271
                                      2472   3296   3365
Mon_Aval_Minus_Cval            $b90e  3182D  1902   2479   3305
Mon_Dec_Aval                   $b922  3198D  1921   2095
Mon_Sub_Aval                   $b924  3204D  2490
Mon_Dec_Bval                   $b93c  3221D  2099   2149   2257
Mon_Inc_Cval                   $b950  3237D  2098   2148   2256
Mon_Add_Cval                   $b952  3243D  1920   2422   2488
MoAC_Ret                       $b95f  3253D  3249   3251
Mon_Dec_Cval                   $b960  3256D  2096
Mon_Aval_To_PCB                $b974  3272D  1930   1968   1977
MPCB_Ret                       $b982  3282D  3275
Mon_Range                      $b983  3285D  2037   2107   2244
MoRa_Err                       $b9af  3315D  3295   3298   3312
Mon_Convert                    $b9b1  3319D  1821
MoCo_10                        $b9c7  3331D  3327
Mon_Bin_BCD                    $ba07  3359D  3337   3540
MoBD_10                        $ba0e  3368D  3370
MoBD_20                        $ba1c  3376D  3395
MoBD_30                        $ba27  3382D  3386
MoBD_40                        $ba33  3387D  3379
MoBD_50                        $ba36  3389D  3393
Mon_Print_Aval                 $ba47  3400D  3348   3355
Mon_Print_Number               $ba5d  3415D  3341   3544
MoPN_10                        $ba63  3425D  3444
MoPN_20                        $ba68  3427D  3433
MoPN_30                        $ba84  3440D  3435   3437
MoPN_40                        $ba8c  3443D  3439
Mon_Disk                       $ba90  3448D  1843
MonD_10                        $ba95  3454D  3451
MonD_20                        $bac9  3478D  3483
MonD_30                        $bad7  3484D  3481
MonD_40                        $bae4  3489D  3495
MonD_50                        $baf4  3497D  3474   3477   3488   3492
                                      3524   3533   3537   3550   3555
MonD_Err                       $bb00  3502D  3456   3458
Mon_Dir                        $bb03  3505D  3468
MDir_10                        $bb08  3511D  3514
MDir_20                        $bb2f  3529D  3557
MDir_30                        $bb31  3530D  3539
MDir_40                        $bb58  3547D  3552
MDir_50                        $bb66  3553D  3548
VIC                            $d000  1329
VIC_Ctrl_1                     $d011  1538
VIC_RASTER                     $d012  1539
VIC_LPX                        $d013  1540
VIC_LPY                        $d014  1541
VIC_SPR_ENA                    $d015  1542
VIC_Ctrl_2                     $d016  1543
VIC_Memory                     $d018  1544
MEM_CONTROL                    $d018  1513
VIC_IRQ_REG                    $d019  1545
VIC_IRQ_ENA                    $d01a  1546
Vd01c                          $d01c  1547
VIC_SS_COLL                    $d01e  1548
Vd020                          $d020  1549
VIC_BG_COL                     $d021  1550
Vd025                          $d025  1551
Vd026                          $d026  1552
Vd027                          $d027  1553
VIC_KBD                        $d02f  1554
VIC_SPEED                      $d030  1555
SID_Freq_1                     $d400  1557
SID_Pulse_1                    $d402  1558
SID_Control_1                  $d404  1559
SID_Attack_1                   $d405  1560
SID_Sustain_1                  $d406  1561
SID_Freq_2                     $d407  1562
SID_Pulse_2                    $d409  1563
SID_Control_2                  $d40b  1564
SID_Attack_2                   $d40c  1565
SID_Sustain_2                  $d40d  1566
SID_Freq_3                     $d40e  1567
SID_Pulse_3                    $d410  1568
SID_Control_3                  $d412  1569
SID_Attack_3                   $d413  1570
SID_Sustain_3                  $d414  1571
SID_Cutoff                     $d415  1572
SID_Resonance                  $d417  1573
SID_Volume                     $d418  1574
SID_POT_X                      $d419  1575
MMU_CONT                       $d500  1579
MMU_PCRA                       $d501  1580
MMU_MODE                       $d505  1581
MMU_RAMC                       $d506  1582
VDC_Register                   $d600  1586
VDC_Data                       $d601  1587
VIC_COLOR_RAM                  $d800  1589
CIA1_KBD_COL                   $dc00  1371
CIA1                           $dc00  1370
CIA1_KBD_ROW                   $dc01  1372
CIA1_DDRA                      $dc02  1386
CIA1_DDRB                      $dc03  1387
VIA2_T1CL                      $dc04  1503
CIA1_TALO                      $dc04  1388
VIA2_T1CH                      $dc05  1504
CIA1_TAHI                      $dc05  1389
CIA1_TBLO                      $dc06  1390
VIA2_T2CL                      $dc06  1502
CIA1_TBHI                      $dc07  1391
VIA2_T2CH                      $dc07  1501
IEC_TIM_H                      $dc07  1514
CIA1_TODT                      $dc08  1392
CIA1_TODS                      $dc09  1393
CIA1_TODM                      $dc0a  1394
CIA1_TODH                      $dc0b  1395
CIA1_SDR                       $dc0c  1396
CIA1_ICR                       $dc0d  1397D  1500   1515
VIA2_IER                       $dc0d  1500
IEC_IFR                        $dc0d  1515
CIA1_CRA                       $dc0e  1398
CIA1_CRB                       $dc0f  1399
CIA2_PRA                       $dd00  1446
IEC_PCR                        $dd00  1516
IEC_DRAN                       $dd00  1517
CIA2                           $dd00  1444
RS2_DSR_CTS                    $dd01  1527
CIA2_PRB                       $dd01  1457
CIA2_DDRA                      $dd02  1468
CIA2_DDRB                      $dd03  1469
CIA2_TALO                      $dd04  1470
RS2_TIM_LOW                    $dd04  1529
RS2_TIM_HIG                    $dd05  1530
CIA2_TAHI                      $dd05  1471
CIA2_TBLO                      $dd06  1472
CIA2_TBHI                      $dd07  1473
CIA2_TODT                      $dd08  1474
CIA2_TODS                      $dd09  1475
CIA2_TODM                      $dd0a  1476
CIA2_TODH                      $dd0b  1477
CIA2_SDR                       $dd0c  1478
CIA2_ICR                       $dd0d  1479D  1528
RS2_IRQ_REG                    $dd0d  1528
CIA2_CRA                       $dd0e  1490
CIA2_CRB                       $dd0f  1491
DMA_BASE                       $df00  1593
DMA_CMD                        $df01  1601
DMA_CBM_LO                     $df02  1602
DMA_CBM_HI                     $df03  1603
DMA_REU_LO                     $df04  1604
DMA_REU_HI                     $df05  1605
DMA_REU_BA                     $df06  1606
DMA_CNT_LO                     $df07  1607
DMA_CNT_HI                     $df08  1608
MMU_CR                         $ff00  1670D  1718
MMU_LCRA                       $ff01  1671
MMU_LCRB                       $ff02  1672
MMU_LCRC                       $ff03  1673
MMU_LCRD                       $ff04  1674
K_SPINIO                       $ff47  1610
K_CLOALL                       $ff4a  1611
K_C64                          $ff4d  1612
K_DMA                          $ff50  1613
K_BOOT                         $ff53  1614
K_PHOENIX                      $ff56  1615
K_LKUPLA                       $ff59  1616
K_LKUPSA                       $ff5c  1617
K_SWAPPER                      $ff5f  1618
K_DLCHR                        $ff62  1619
K_PFKEY                        $ff65  1620
K_SETBNK                       $ff68  1621D  3464
K_GETCFG                       $ff6b  1622
K_JSRFAR                       $ff6e  1623D  1978
K_JMPFAR                       $ff71  1624D  1971
K_INDFET                       $ff74  1625D  1856
K_INDSTA                       $ff77  1626D  1870   2080
K_INDCMP                       $ff7a  1627D  1884   2082
K_PRIMM                        $ff7d  1628D  1702   1729   1747   1799
                                      1959   2001   2228   2417   2481
                                      2517   3090   3105
K_VERSION                      $ff80  1629
K_CINT                         $ff81  1630
K_IOINIT                       $ff84  1631
K_RAMTAS                       $ff87  1632
K_RESTOR                       $ff8a  1633
K_VECTOR                       $ff8d  1634
K_SETMSG                       $ff90  1635D  1740
K_SECND                        $ff93  1636
K_TKSA                         $ff96  1637
K_MEMTOP                       $ff99  1638
K_MEMBOT                       $ff9c  1639
K_KEY                          $ff9f  1640
K_SETTMO                       $ffa2  1641
K_ACPTR                        $ffa5  1642
K_CIOUT                        $ffa8  1643
K_UNTLK                        $ffab  1644
K_UNLSN                        $ffae  1645
K_LISTN                        $ffb1  1646
K_TALK                         $ffb4  1647
K_READST                       $ffb7  1648
K_SETLFS                       $ffba  1649D  3472   3522
K_SETNAM                       $ffbd  1650D  3518
K_OPEN                         $ffc0  1651D  3473   3523
K_CLOSE                        $ffc3  1652D  3500
K_CHKIN                        $ffc6  1653D  3487   3526
K_CKOUT                        $ffc9  1654D  3476
K_CLRCH                        $ffcc  1655D  3484   3497
K_BASIN                        $ffcf  1656D  1770   3489   3530   3534
                                      3547
K_BSOUT                        $ffd2  1657D  1753   1987   2012   2500
                                      2545   2548   2645   3060   3084
                                      3099   3115   3118   3325   3330
                                      3336   3344   3351   3442   3482
                                      3490   3546   3551
K_LOADSP                       $ffd5  1658D  2222
K_SAVESP                       $ffd8  1659D  2211
K_SETTIM                       $ffdb  1660
K_RDTIM                        $ffde  1661
K_STOP                         $ffe1  1662D  1913   2070   2146   2254
                                      2483   3554
K_GETIN                        $ffe4  1663
K_CLALL                        $ffe7  1664
K_UDTIM                        $ffea  1665
K_SCRORG                       $ffed  1666
K_PLOT                         $fff0  1667
K_IOBASE                       $fff3  1668
M_Aval                         $0060   328D  1900   1908   1909   1910
                                      1934   1950   2047   2049   2052
                                      2053   2055   2056   2058   2059
                                      2073   2076   2081   2090   2092
                                      2126   2194   2203   2204   2252
                                      2310   2318   2388   2391   2476
                                      2950   2951   2952   2995   3001
                                      3002   3003   3015   3016   3018
                                      3019   3021   3022   3027   3028
                                      3030   3031   3033   3034   3173
                                      3175   3177   3186   3188   3189
                                      3191   3192   3194   3209   3211
                                      3212   3214   3215   3217   3276
                                      3277   3278   3299   3301   3303
                                      3306   3308   3310   3326   3331
                                      3332   3404   3406   3408   3454
                                      3459   3461   3470   3520   3531
                                      3535
M_Cval                         $0066   330D  1853   1854   1866   1868
                                      1880   1882   2046   2048   2062
                                      2210   2234   2235   2246   2389
                                      2392   2428   2431   2435   2558
                                      2562   3057   3061   3062   3174
                                      3176   3178   3187   3190   3193
                                      3247   3248   3250   3252   3260
                                      3262   3263   3265   3266   3268
                                      3376   3377   3378
M_Bval                         $0063   329D  2051   2054   2057   2337
                                      2346   2379   2385   2634   2636
                                      2639   2640   3225   3227   3228
                                      3230   3231   3233   3307   3309
                                      3311   3529   3538
DS_LEN                         $007a   369D  1769   2176   2189   2326
                                      2916   2926   2971   3148   3155
                                      3162   3466   3478   3479   3509
                                      3516
K_VERCK                        $0093   427D  1819   2034   2043   2078
                                      2134   2141   2205   2216   2226
STATUS                         $0090   423D  2165   2223   3493   3532
                                      3536   3549
CR                             $000d     9D  1775   2482   3091   3098
                                      3106   3491
MODE_80                        $00d7   537D  1905   1917   1953   1997
                                      2014
BANK                           $0002    32D  1705   1728   1750   1757
                                      3281
PTR_HI                         $009f   462D  2342   2380   2455   2463
ESC                            $001b    15D  1960   2418   2482   3106
PC_HI                          $0003    36D  1708   1726   1754   3280
FNADR                          $00bb   508D  2167   2169   2182
SA                             $00b9   506D  2160   2209   2237
FNLEN                          $00b7   504D  2163   2183   3462
BA                             $00c6   520D  2162   2199
FA                             $00ba   507D  2159   2195
QUOTE                          $0022    17D  2174   2180
CHARAC                         $0009    42D  1738   1969
S_REG                          $0005    38D  1722   1935
PC_LO                          $0004    37D  1725   3279
NDX                            $00d0   530D  2440
FNBANK                         $00c7   521D  2164
UP                             $0091    19D  3091
FACTPB                         $005e   323D  2410
APOSTR                         $0027    18D  2111
Y_REG                          $0008    41D  1721
X_REG                          $0007    40D  1720
A_REG                          $0006    39D  1719
PICHAR                         $00ff    20
CTRL_ROW                       $00fb  1496
BEEPER                         $00f9   575
Scroll_Locked                  $00f8   574
LOCKS                          $00f7   573
INSFLG                         $00f6   572
INSRT                          $00f5   571
QTSW                           $00f4   570
E_Reverse                      $00f3   569
TCOLOR                         $00f2   568
E_Attribute                    $00f1   567
LSTCHR                         $00f0   566
DATAX                          $00ef   565
COLUMNS                        $00ee   564
LINES                          $00ed   563
Cursor_Col                     $00ec   561
Cursor_Row                     $00eb   560
Cursor_End                     $00ea   558
CurLst_Col                     $00e9   557
CurLst_Row                     $00e8   556
Margin_Right                   $00e7   554
Margin_Left                    $00e6   553
Margin_Top                     $00e5   552
Margin_Bottom                  $00e4   551
USER                           $00e2   547
PNT                            $00e0   546
E_Row                          $00df   544
E_Col                          $00de   543
E_End                          $00dc   542
E_Beg                          $00da   541
CHAREN                         $00d9   540
COLRAM_PAGE                    $00d8  1510
GRAPHM                         $00d8   539
CRSW                           $00d6   536
LSTX                           $00d5   535
SFDX                           $00d4   534
SHFLAG                         $00d3   533
KEYIDX                         $00d2   532
KYNDX                          $00d1   531
IMPARM                         $00ce   528
KEYTAB                         $00cc   526
ROBUF                          $00ca   524
RIBUF                          $00c8   523
DATA                           $00c5   519
MEMUSS                         $00c3   517
STAH                           $00c2   516
STAL                           $00c1   515
CAS1                           $00c0   513
DRIVE                          $00bf   512
FSBLK                          $00be   511
RS_Parity                      $00bd   510
LA                             $00b8   505
RS_Out                         $00b6   500
RS_Next                        $00b5   499
RS_Count                       $00b4   498
TAPE1                          $00b2   497
CMP1                           $00b1   492
CMP0                           $00b0   491
EAH                            $00af   488
EAL                            $00ae   487
SAH                            $00ad   486
SAL                            $00ac   485
RSI_Parity                     $00ab   483
RSI_Data                       $00aa   482
RSI_Start                      $00a9   481
RSI_Count                      $00a8   480
RSI_In_Bit                     $00a7   479
BUFPT                          $00a6   477
CNTDN                          $00a5   476
BSOUR1                         $00a4   475
R2D2                           $00a3   474
JIFFY_CLOCK                    $00a0   472
PTR_LO                         $009e   461
MSGFLG                         $009d   460
DPSW                           $009c   458
PRTY                           $009b   457
DFLTO                          $009a   454
DFLTN                          $0099   444
LDTND                          $0098   440
XSAV                           $0097   433
SYNO                           $0096   432
BSOUR                          $0095   430
C3PO                           $0094   429
SVXT                           $0092   426
STKEY                          $0091   425
VTEMPA                         $008e   409
GRAPNT                         $008c   408
STOPNB                         $008b   406
SCALE_Y                        $0089   405
SCALE_X                        $0087   404
FG_COL                         $0086   403
MULCO2                         $0085   402
MULCO1                         $0084   401
COLSEL                         $0083   400
OLDSTK                         $0082   396
DOSFLB                         $0081   394
DOSFLA                         $0080   386
RUNMOD                         $007f   373
STND_COL                       $007f  1498
CTRL_COL                       $007f  1495
TOS                            $007d   372
DS_ADR                         $007b   370
SYNTMP                         $0079   368
KEYSIZ                         $0078   367
TEMP_A                         $0077   366
MVDFLG                         $0076   365
AUTINC                         $0074   364
STRNG2                         $0072   363
FROUND                         $0071   359
STRPTR                         $0070   354
FAC2_SI                        $006f   350
FAC2_M4                        $006e   349
FAC2_M3                        $006d   348
FAC2_M2                        $006c   347
FAC2_M1                        $006b   346
FAC2_EX                        $006a   345
DEGREE                         $0069   341
FAC1_SI                        $0068   339
FAC1_M4                        $0067   338
FAC1_M3                        $0066   337
FAC1_M2                        $0065   336
FAC1_M1                        $0064   335
FAC1_EX                        $0063   334
LOWTR                          $0061   326
TENEXP                         $0060   325
TMPVAR                         $005f   324
DESCA                          $005d   315
HIGHTR                         $005c   313
ARYPNT                         $005a   306
FACTPA                         $0059   301
OLDOV                          $0058   293
JUMPER                         $0056   288
HELPER                         $0055   281
DSCPNT                         $0052   274
GRBPNT                         $0050   270
COLMAX                         $0050  1509
OP_TMP                         $004f   264
VARTXT                         $004d   260
FORPNT                         $004b   255
VARPNT                         $0049   249
VARNAM                         $0047   243
INPPTR                         $0045   233
DATPTR                         $0043   227
DATLIN                         $0041   222
FNDPNT                         $003f   217
TXTPTR                         $003d   212
CURLIN                         $003b   206
MEMSIZ                         $0039   200
FRESPC                         $0037   196
FRETOP                         $0035   192
STREND                         $0033   188
ARYTAB                         $0031   184
VARTAB                         $002f   180
TXTTAB                         $002d   176
FAC3_M4                        $002b   170
FAC3_M3                        $002a   169
FAC3_M2                        $0029   168
FAC3_M1                        $0028   167
COLS                           $0028  1506
INDEXB                         $0026   163
INDEXA                         $0024   157
IEC_DAT_BIT                    $0020  1534
RIGHT                          $001d    16
TEMPST                         $001b   151
LASTPT                         $0019   144
ROWS                           $0019  1507
TEMPPT                         $0018   139
LINNUM                         $0016   134
CHANNL                         $0015   126
DEL                            $0014    14
TANSGN                         $0014   119
HOME                           $0013    13
INPFLG                         $0013   109
SUBFLG                         $0012   105
REVERSE                        $0012    12
GARBFL                         $0011    99
DOWN                           $0011    11
IEC_CLK_BIT                    $0010  1533
INTFLG                         $0010    84
VALTYP                         $000f    78
BLINK                          $000f    10
Default_Color                  $000e  1511
DIMFLG                         $000e    72
B_COUNT                        $000d    65
B_VERCK                        $000c    53
TRMPOS                         $000b    52
LF                             $000a     8
ENDCHR                         $000a    51
IEC_ATN_BIT                    $0008  1531
RS232_C_BIT                    $0004  1535
IEC_IFR_BIT                    $0002  1532
COLINK                         $0002  1508
C_ULINE                        $0002     7
R8502                          $0001    28
D8502                          $0000    27
M_Aval                         $0060   328D  1900   1908   1909   1910
                                      1934   1950   2047   2049   2052
                                      2053   2055   2056   2058   2059
                                      2073   2076   2081   2090   2092
                                      2126   2194   2203   2204   2252
                                      2310   2318   2388   2391   2476
                                      2950   2951   2952   2995   3001
                                      3002   3003   3015   3016   3018
                                      3019   3021   3022   3027   3028
                                      3030   3031   3033   3034   3173
                                      3175   3177   3186   3188   3189
                                      3191   3192   3194   3209   3211
                                      3212   3214   3215   3217   3276
                                      3277   3278   3299   3301   3303
                                      3306   3308   3310   3326   3331
                                      3332   3404   3406   3408   3454
                                      3459   3461   3470   3520   3531
                                      3535
M_Cval                         $0066   330D  1853   1854   1866   1868
                                      1880   1882   2046   2048   2062
                                      2210   2234   2235   2246   2389
                                      2392   2428   2431   2435   2558
                                      2562   3057   3061   3062   3174
                                      3176   3178   3187   3190   3193
                                      3247   3248   3250   3252   3260
                                      3262   3263   3265   3266   3268
                                      3376   3377   3378
M_Operand                      $0aa0  1014D  2273   2293   2294   2308
                                      2322   2331   2456   3368   3371
                                      3382   3383   3384   3389   3390
                                      3391   3405   3407   3409   3411
                                      3427   3428   3429   3430
M_Bval                         $0063   329D  2051   2054   2057   2337
                                      2346   2379   2385   2634   2636
                                      2639   2640   3225   3227   3228
                                      3230   3231   3233   3307   3309
                                      3311   3529   3538
DS_LEN                         $007a   369D  1769   2176   2189   2326
                                      2916   2926   2971   3148   3155
                                      3162   3466   3478   3479   3509
                                      3516
M_Temp                         $0ab7  1025D  2061   2247   2996   3010
                                      3011   3012   3014   3017   3020
                                      3300   3302   3304
M_Count                        $0ab4  1022D  2274   2302   2316   2927
                                      2942   2953   2990   3047   3423
                                      3438   3440
M_Op_Size                      $0aab  1016D  2357   2383   2407   2420
                                      2421   2486   2487   2489   2513
                                      2531   2608
K_VERCK                        $0093   427D  1819   2034   2043   2078
                                      2134   2141   2205   2216   2226
M_Save_XR                      $0aaf  1018D  2454   2464   3113   3117
                                      3154   3163   3207   3210
KEYD                           $034a   767D  2424   2426   2427   2430
                                      2433   2434   2437   2438
BUF                            $0200   640D  1771   1778   2177   3156
                                      3480   3513   3517
M_Shift                        $0ab6  1024D  2313   2974   3000   3042
                                      3424   3425
M_Save_X                       $0ab2  1020D  1852   1858   1865   1872
                                      1879   1887
M_Format                       $0aaa  1015D  2345   2359   2366   2533
                                      2542   2606
STATUS                         $0090   423D  2165   2223   3493   3532
                                      3536   3549
CR                             $000d     9D  1775   2482   3091   3098
                                      3106   3491
M_Data                         $0a80  1013D  2116   2127   2138   2166
                                      2168
MODE_80                        $00d7   537D  1905   1917   1953   1997
                                      2014
BANK                           $0002    32D  1705   1728   1750   1757
                                      3281
M_Opcode                       $0ab1  1019D  2339   2343   2414   2460
PTR_HI                         $009f   462D  2342   2380   2455   2463
ESC                            $001b    15D  1960   2418   2482   3106
PC_HI                          $0003    36D  1708   1726   1754   3280
VSH                            $11d6  1104D  1105   1106   1107
M_Number                       $0ab5  1023D  2986   2987   3026
M_Dir                          $0ab3  1021D  2036   2066   2088
FNADR                          $00bb   508D  2167   2169   2182
SA                             $00b9   506D  2160   2209   2237
FNLEN                          $00b7   504D  2163   2183   3462
M_Mne                          $0aac  1017D  2282   2288
CMPARE                         $02be   670D  1881   2075
STASH                          $02af   658D  1867   2074
BA                             $00c6   520D  2162   2199
FA                             $00ba   507D  2159   2195
QUOTE                          $0022    17D  2174   2180
CHARAC                         $0009    42D  1738   1969
S_REG                          $0005    38D  1722   1935
PC_LO                          $0004    37D  1725   3279
RESET_VECTOR                   $0a00   910D  1827
EXMON                          $032e   751D  1783
STACK                          $0100   577D  2124
NDX                            $00d0   530D  2440
FNBANK                         $00c7   521D  2164
UP                             $0091    19D  3091
FACTPB                         $005e   323D  2410
APOSTR                         $0027    18D  2111
Y_REG                          $0008    41D  1721
X_REG                          $0007    40D  1720
A_REG                          $0006    39D  1719
V3e00                          $3e00  1222
GRAFX_RAM                      $2000  1220
PROGRAM_START                  $1c01  1217
COLOR_RAM                      $1c00  1219
RAMBOT                         $1c00  1216
IRQ_ACTIVE_FLAG                $12fd  1215
SPRNUM                         $12fc  1214
LINCNT                         $12fb  1213
DEFMOD                         $12fa  1212
SAVRAM                         $12b7  1210
Win_YH                         $12b6  1208
Win_XH                         $12b5  1207
Win_YL                         $12b4  1206
Win_XL                         $12b3  1205
POT_IEMP_2                     $12b2  1203
POT_IEMP_1                     $12b1  1202
TEMP_WAVEFORM                  $12b0  1200
TEMP_PULSE_HI                  $12af  1199
TEMP_PULSE_LO                  $12ae  1198
TEMP_FREQ_HI                   $12ad  1197
TEMP_FREQ_LO                   $12ac  1196
TEMP_STEP_HI                   $12ab  1195
TEMP_STEP_LO                   $12aa  1194
TEMP_DIRECTION                 $12a9  1193
TEMP_MIN_HI                    $12a8  1192
TEMP_MIN_LO                    $12a7  1191
TEMP_MAX_HI                    $12a6  1190
TEMP_MAX_LO                    $12a5  1189
TEMP_TIME_HI                   $12a4  1188
TEMP_TIME_LO                   $12a3  1187
SOUND_FREQ_HI                  $12a0  1186
SOUND_FREQ_LO                  $129d  1185
SOUND_STEP_HI                  $129a  1184
SOUND_STEP_LO                  $1297  1183
SOUND_DIR                      $1294  1182
SOUND_MIN_HI                   $1291  1181
SOUND_MIN_LO                   $128e  1180
SOUND_MAX_HI                   $128b  1179
SOUND_MAX_LO                   $1288  1178
Sound_Duration_3_Hi            $1287  1177
Sound_Duration_2_Hi            $1286  1176
Sound_Duration_1_Hi            $1285  1175
Sound_Duration_3_Lo            $1284  1174
Sound_Duration_2_Lo            $1283  1173
Sound_Duration_1_Lo            $1282  1172
Voice_Number                   $1281  1171
Collision_Type                 $1280  1170
INT_VAL                        $127f  1169
INT_ADR_HI                     $127c  1168
INT_ADR_LO                     $1279  1167
Light_Pen_Flag                 $1278  1166
INT_TRIP_FLAG                  $1276  1165
Old_Volume                     $1275  1164
Old_Filter                     $1274  1163
FILTERS                        $1271  1162
PULSHI                         $1267  1161
PULSLO                         $125d  1160
WAVTAB                         $1253  1159
SUSTAB                         $1249  1158
ATKTAB                         $123f  1157
PARCNT                         $123e  1156
TONVAL                         $123b  1154
TONNUM                         $123a  1153
NIBBLE                         $1239  1152
FLTFLG                         $1238  1150
FLTSAV                         $1234  1149
DNOTE                          $1233  1148
WAVE0                          $1230  1147
VOICE                          $122f  1146
Snd_Pitch                      $122d  1144
Snd_Sharp                      $122c  1143
Snd_Octave                     $122b  1142
Snd_Dur_Tmp                    $1229  1141
Snd_Duration                   $1223  1140
Snd_Tempo                      $1222  1139
ARC_SEG                        $1220  1135
RNDX                           $121b  1133
FUNC_USR                       $1218  1131
TEXT_LIN                       $1216  1130
TEXT_TMP                       $1214  1129
TEXT_MAX                       $1212  1128
TEXT_TOP                       $1210  1127
ERRTXT                         $120e  1125
TMPTRP                         $120d  1124
TRAPNO                         $120b  1123
ERRLIN                         $1209  1122
ERRNUM                         $1208  1121
PU_MONEY                       $1207  1119
PU_DOT                         $1206  1118
PU_COMMA                       $1205  1117
PU_FILL                        $1204  1116
OLDTXT                         $1202  1114
OLDLIN                         $1200  1113
REC_SA                         $11ed  1112
CHARGEN_GRAF                   $11ec  1110
CHARGEN_TEXT                   $11eb  1109
VSH_LPY                        $11ea  1107
VSH_LPX                        $11e9  1106
VSH_SS_COLL                    $11e7  1105
SPRITE_DATA                    $117e  1098
ADRAY2                         $117c  1096
ADRAY1                         $117a  1095
Rel_Abs_Flag                   $1179  1094
VTEMP4                         $1178  1093
VTEMP3                         $1177  1092
T5                             $1176  1090
T4                             $1175  1089
T3                             $1174  1088
Ren_Step_Hi                    $1173  1086
Ren_Step_Lo                    $1172  1085
Ren_Line_Hi                    $1171  1084
Ren_Line_Lo                    $1170  1083
TRCFLG                         $116f  1079
NUMCNT                         $116e  1078
BITMSK                         $116d  1077
FILFLG                         $116c  1076
WIDTH                          $116b  1075
SCALEM                         $116a  1074
BITCNT                         $1169  1073
CHRPAG                         $1168  1072
YRCOS                          $1166  1071
XRSIN                          $1164  1070
YRSIN                          $1162  1069
XRCOS                          $1160  1068
ANGEND                         $115e  1067
ANGBEG                         $115c  1066
YDIST2                         $115a  1065
ROTANG                         $1158  1064
YRADIUS                        $1156  1063
XRADIUS                        $1154  1062
YCIRCL                         $1152  1061
XCIRCL                         $1150  1060
ANGCNT                         $114e  1059
COSVAL                         $114c  1058
SINVAL                         $114a  1057
ANGSGN                         $1149  1056
GREATR                         $1148  1055
LESSER                         $1147  1054
ERRVAL                         $1145  1053
FCT                            $1141  1052
YSGN                           $113f  1051
XSGN                           $113d  1050
YABS                           $113b  1049
XABS                           $1139  1048
YDEST                          $1137  1047
XDEST                          $1135  1046
YPOS                           $1133  1045
XPOS                           $1131  1044
DOSSTR                         $1100  1040
PKYDEF                         $100a  1039
PKYBUF                         $1000  1038
R_Send_Buffer                  $0d00  1037
R_Rece_Buffer                  $0c00  1036
T_Buffer                       $0b00  1035
DINFLAG                        $0ac5  1029
Module_Flags                   $0ac1  1028
Module_Bank                    $0ac0  1027
SWPMAP                         $0a60  1009
ZP_SW_COL                      $0a40  1004
VDC_UPDATE_HI                  $0a3d   999
VDC_UPDATE_LO                  $0a3c   998
VIC_RAM_PAGE                   $0a3b   997
SPRITES                        $0a3a   996
VSH_Ctrl_1                     $0a39   995
VSH_SPR_ENA                    $0a38   994
VSH_SPEED                      $0a37   993
PAL_ADJ                        $0a36   992
FN_SAVE_X                      $0a35   991
VSH_SPLIT                      $0a34   990
VDC_ATT                        $0a33   989
VDC_COL                        $0a32   988
VDC_ROW                        $0a31   987
LINTMP                         $0a30   986
VDC_ATT_PAGE                   $0a2f   985
VDC_RAM_PAGE                   $0a2e   984
VSH_BITMAP                     $0a2d   983
VSH_TEXT                       $0a2c   982
CURMOD                         $0a2b   981
GDCOL                          $0a2a   972
GDBLN                          $0a29   971
BLNCT                          $0a28   970
BLNSW                          $0a27   969
BLNON                          $0a26   968
LSTHF                          $0a25   966
DELAY                          $0a24   965
KOUNT                          $0a23   964
RPTFLG                         $0a22   963
PAUSE                          $0a21   962
XMAX                           $0a20   961
JIFFY_COUNTDOWN                $0a1d   960
Fast_IEC                       $0a1c   948
RS_OBP_End                     $0a1b   946
RS_OBP_Beg                     $0a1a   945
RS_IBP_Beg                     $0a19   944
RS_IBP_End                     $0a18   943
RS_Timer_Hi                    $0a17   942
RS_Timer_Lo                    $0a16   941
RS_Bits                        $0a15   940
RS_Status                      $0a14   931
RS_Baudrate                    $0a12   930
RS_Command                     $0a11   929
RS_Control                     $0a10   928
RS_Enable                      $0a0f   927
TIMOUT                         $0a0e   923
STUPID                         $0a0d   922
KIKA26                         $0a0c   921
CASTON                         $0a0b   920
IRQTMP                         $0a09   916
MEM_TOP                        $0a07   915
MEM_BOT                        $0a05   914
INIT_STATUS                    $0a04   913
PALNTS                         $0a03   912
DEJAVU                         $0a02   911
BASIC_STACK                    $0800   908
VAR_START                      $0400   906
VIC_TEXT                       $0400   905
RAM_DMA                        $03f0   894
FG_MC1                         $03e3   889
FG_BG                          $03e2   888
SPRTMP                         $03e0   886
BITS                           $03df   885
SAVSIZ                         $03db   884
STR_BANK                       $03da   883
TMPDES                         $03d6   882
USER_BANK                      $03d5   880
NULL_DESC                      $03d2   874
INDTXT                         $03c9   861
Get_INDEXB_0                   $03c0   853
Get_INDEXA_1                   $03b7   845
Fetch_1                        $03ab   832
Fetch_0                        $039f   818
ISNUM                          $0390   804
CHRGOT                         $0386   797
CHRGET                         $0380   791
SAT                            $0376   776
FAT                            $036c   775
LAT                            $0362   774
BITABL                         $035e   769
TABMAP                         $0354   768
DECODE                         $033e   765
KEYCHK                         $033c   763
KEYVEC                         $033a   762
ESCVEC                         $0338   761
SHFVEC                         $0336   760
CTLVEC                         $0334   759
ISAVE                          $0332   753
ILOAD                          $0330   752
ICLALL                         $032c   750
IGETIN                         $032a   749
ISTOP                          $0328   748
IBSOUT                         $0326   747
IBASIN                         $0324   746
ICLRCH                         $0322   745
ICKOUT                         $0320   744
ICHKIN                         $031e   743
ICLOSE                         $031c   742
IOPEN                          $031a   741
INMI                           $0318   740
IBRK                           $0316   739
IIRQ                           $0314   738
IESCEX                         $0310   732
IESCPR                         $030e   731
IESCLK                         $030c   730
IEVAL                          $030a   729
IGONE                          $0308   728
IQPLOP                         $0306   727
ICRNCH                         $0304   726
IMAIN                          $0302   725
IERROR                         $0300   724
USRVEC                         $02fc   719
JMPFAR                         $02e3   698
JSRFAR                         $02cd   682
FETCH                          $02a2   648
ENDFD                          $0136   628
LFOR                           $0135   627
BEGFD                          $0134   626
BLFD                           $0133   625
SNO                            $0132   624
CFORM                          $0131   623
ETOF                           $0130   622
FESP                           $012f   621
POSP                           $012e   620
NF                             $012d   619
VF                             $012c   618
CHSN                           $012b   617
VN                             $012a   616
UEXP                           $0129   615
USGN                           $0128   614
SWE                            $0127   613
FLAG                           $0126   612
DOLR                           $0125   611
ENR                            $0124   610
BNR                            $0123   609
DOS_UNIT                       $0122   603
DOS_ID                         $0120   602
DOS_BANK                       $011f   601
DOS_RL                         $011e   600
DOS_SA                         $011d   599
DOS_FA                         $011c   598
DOS_LA                         $011b   597
DOS_END                        $0119   596
DOS_BEG                        $0117   595
DOS_FNADR_2                    $0115   594
DOS_DRIVE_2                    $0114   593
DOS_FNLEN_2                    $0113   592
DOS_DRIVE_1                    $0112   591
DOS_FNLEN_1                    $0111   590
DOS_COUNT                      $0110   589
PICHAR                         $00ff    20
CTRL_ROW                       $00fb  1496
BEEPER                         $00f9   575
Scroll_Locked                  $00f8   574
LOCKS                          $00f7   573
INSFLG                         $00f6   572
INSRT                          $00f5   571
QTSW                           $00f4   570
E_Reverse                      $00f3   569
TCOLOR                         $00f2   568
E_Attribute                    $00f1   567
LSTCHR                         $00f0   566
DATAX                          $00ef   565
COLUMNS                        $00ee   564
LINES                          $00ed   563
Cursor_Col                     $00ec   561
Cursor_Row                     $00eb   560
Cursor_End                     $00ea   558
CurLst_Col                     $00e9   557
CurLst_Row                     $00e8   556
Margin_Right                   $00e7   554
Margin_Left                    $00e6   553
Margin_Top                     $00e5   552
Margin_Bottom                  $00e4   551
USER                           $00e2   547
PNT                            $00e0   546
E_Row                          $00df   544
E_Col                          $00de   543
E_End                          $00dc   542
E_Beg                          $00da   541
CHAREN                         $00d9   540
COLRAM_PAGE                    $00d8  1510
GRAPHM                         $00d8   539
CRSW                           $00d6   536
LSTX                           $00d5   535
SFDX                           $00d4   534
SHFLAG                         $00d3   533
KEYIDX                         $00d2   532
KYNDX                          $00d1   531
IMPARM                         $00ce   528
KEYTAB                         $00cc   526
ROBUF                          $00ca   524
RIBUF                          $00c8   523
DATA                           $00c5   519
MEMUSS                         $00c3   517
STAH                           $00c2   516
STAL                           $00c1   515
CAS1                           $00c0   513
DRIVE                          $00bf   512
FSBLK                          $00be   511
RS_Parity                      $00bd   510
LA                             $00b8   505
RS_Out                         $00b6   500
RS_Next                        $00b5   499
RS_Count                       $00b4   498
TAPE1                          $00b2   497
CMP1                           $00b1   492
CMP0                           $00b0   491
EAH                            $00af   488
EAL                            $00ae   487
SAH                            $00ad   486
SAL                            $00ac   485
RSI_Parity                     $00ab   483
RSI_Data                       $00aa   482
RSI_Start                      $00a9   481
RSI_Count                      $00a8   480
RSI_In_Bit                     $00a7   479
BUFPT                          $00a6   477
CNTDN                          $00a5   476
BSOUR1                         $00a4   475
R2D2                           $00a3   474
JIFFY_CLOCK                    $00a0   472
PTR_LO                         $009e   461
MSGFLG                         $009d   460
DPSW                           $009c   458
PRTY                           $009b   457
DFLTO                          $009a   454
DFLTN                          $0099   444
LDTND                          $0098   440
XSAV                           $0097   433
SYNO                           $0096   432
BSOUR                          $0095   430
C3PO                           $0094   429
SVXT                           $0092   426
STKEY                          $0091   425
VTEMPA                         $008e   409
GRAPNT                         $008c   408
STOPNB                         $008b   406
SCALE_Y                        $0089   405
SCALE_X                        $0087   404
FG_COL                         $0086   403
MULCO2                         $0085   402
MULCO1                         $0084   401
COLSEL                         $0083   400
OLDSTK                         $0082   396
DOSFLB                         $0081   394
DOSFLA                         $0080   386
RUNMOD                         $007f   373
STND_COL                       $007f  1498
CTRL_COL                       $007f  1495
TOS                            $007d   372
DS_ADR                         $007b   370
SYNTMP                         $0079   368
KEYSIZ                         $0078   367
TEMP_A                         $0077   366
MVDFLG                         $0076   365
AUTINC                         $0074   364
STRNG2                         $0072   363
FROUND                         $0071   359
STRPTR                         $0070   354
FAC2_SI                        $006f   350
FAC2_M4                        $006e   349
FAC2_M3                        $006d   348
FAC2_M2                        $006c   347
FAC2_M1                        $006b   346
FAC2_EX                        $006a   345
DEGREE                         $0069   341
FAC1_SI                        $0068   339
FAC1_M4                        $0067   338
FAC1_M3                        $0066   337
FAC1_M2                        $0065   336
FAC1_M1                        $0064   335
FAC1_EX                        $0063   334
LOWTR                          $0061   326
TENEXP                         $0060   325
TMPVAR                         $005f   324
DESCA                          $005d   315
HIGHTR                         $005c   313
ARYPNT                         $005a   306
FACTPA                         $0059   301
OLDOV                          $0058   293
JUMPER                         $0056   288
HELPER                         $0055   281
DSCPNT                         $0052   274
GRBPNT                         $0050   270
COLMAX                         $0050  1509
OP_TMP                         $004f   264
VARTXT                         $004d   260
FORPNT                         $004b   255
VARPNT                         $0049   249
VARNAM                         $0047   243
INPPTR                         $0045   233
DATPTR                         $0043   227
DATLIN                         $0041   222
FNDPNT                         $003f   217
TXTPTR                         $003d   212
CURLIN                         $003b   206
MEMSIZ                         $0039   200
FRESPC                         $0037   196
FRETOP                         $0035   192
STREND                         $0033   188
ARYTAB                         $0031   184
VARTAB                         $002f   180
TXTTAB                         $002d   176
FAC3_M4                        $002b   170
FAC3_M3                        $002a   169
FAC3_M2                        $0029   168
FAC3_M1                        $0028   167
COLS                           $0028  1506
INDEXB                         $0026   163
INDEXA                         $0024   157
IEC_DAT_BIT                    $0020  1534
RIGHT                          $001d    16
TEMPST                         $001b   151
LASTPT                         $0019   144
ROWS                           $0019  1507
TEMPPT                         $0018   139
LINNUM                         $0016   134
CHANNL                         $0015   126
DEL                            $0014    14
TANSGN                         $0014   119
HOME                           $0013    13
INPFLG                         $0013   109
SUBFLG                         $0012   105
REVERSE                        $0012    12
GARBFL                         $0011    99
DOWN                           $0011    11
IEC_CLK_BIT                    $0010  1533
INTFLG                         $0010    84
VALTYP                         $000f    78
BLINK                          $000f    10
Default_Color                  $000e  1511
DIMFLG                         $000e    72
B_COUNT                        $000d    65
B_VERCK                        $000c    53
TRMPOS                         $000b    52
LF                             $000a     8
ENDCHR                         $000a    51
IEC_ATN_BIT                    $0008  1531
RS232_C_BIT                    $0004  1535
IEC_IFR_BIT                    $0002  1532
COLINK                         $0002  1508
C_ULINE                        $0002     7
R8502                          $0001    28
D8502                          $0000    27
